package com.svyaznoy {	import caurina.transitions.Tweener;	import com.svyaznoy.events.MapEvent;	import com.svyaznoy.events.ProviderEvent;	import flash.display.Sprite;	import flash.events.Event;	import flash.utils.Dictionary;		/**	 * ...	 * @author Sergey Krivtsov (flashgangsta@gmail.com)	 */	public class Departures extends Screen {				[Embed(source = "../../assets/Maps.xml", mimeType = "application/octet-stream")]		private const CONFIG_CLASS:Class;				private const MAP_CONTRAST_OUT_PARAMS:Object = { _contrast: -.4, time: .3, transition: "easeOutCubic" };		private const MAP_CONTRAST_IN_PARAMS:Object = { _contrast: 0, time: .3, transition: "easeOutCubic" };				private const YEAR_FROM:int = 	2010;		private const YEAR_TO:int = 	2013;				private var currentMap:Map;		private var worldMap:Sprite;		private var grid:Sprite;		private var yearsButtons:YearButtons;		private var datasSortedByYear:Dictionary;				/**		 * 		 */				public function Departures() {			worldMap = getChildByName( "worldMap_mc" ) as Sprite;			yearsButtons = getChildByName( "yearButtons_mc" ) as YearButtons;			grid = getChildByName( "grid_mc" ) as Sprite;						yearsButtons.setButtons( YEAR_FROM, YEAR_TO );			yearsButtons.addEventListener( Event.CHANGE, onYearChanged );						currentMap = getMapByYear( int( yearsButtons.getSelectedYear() ) );						setVisible( false );						provider.getDepartures( null, "galleries,videos" );			provider.addEventListener( ProviderEvent.ON_DEPARTURES, onData );						addEventListener( MapEvent.DARK_OUT_BEGIN, setDarkMap );			addEventListener( MapEvent.DARK_IN_BEGIN, setDarkMap );		}				private function setDarkMap( event:MapEvent ):void {			event.stopImmediatePropagation();			Tweener.addTween( worldMap, event.type === MapEvent.DARK_OUT_BEGIN ? MAP_CONTRAST_OUT_PARAMS : MAP_CONTRAST_IN_PARAMS );		}				/**		 * 		 * @param	event		 */				override protected function onData( event:ProviderEvent ):void {			super.onData( event );			datasSortedByYear = getDatasSortedByYear();			initMaps();			displayData();		}				/**		 * 		 */				override protected function displayData():void {			super.displayData();			setVisible( true );		}				/**		 * 		 */				private function initMaps():void {			var map:Map;			var data:Object;			var config:XML = new XML( new CONFIG_CLASS() );			var mapConfig:XMLList;						for ( var year:int = YEAR_FROM; year <= YEAR_TO; year++ ) {				map = getMapByYear( year );				mapConfig = config[map.name.substr( 0, "mapXXXX".length )].item;				map.init( mapConfig, datasSortedByYear[ year ] );			}		}				/**		 * 		 * @return		 */				private function getDatasSortedByYear():Dictionary {			var result:Dictionary = new Dictionary();			var currentYear:int;			var dataItem:Object;						for ( var i:int = 0; i < data.length; i++ ) {				dataItem = data[ i ];				if ( !result[ dataItem.year ] ) {					result[ dataItem.year ] = new Vector.<Object>()				}				result[ dataItem.year ].push( dataItem );			}			return result;		}				/**		 * 		 * @param	event		 */				private function onYearChanged( event:Event ):void {			currentMap.hide();			currentMap = getMapByYear( int( yearsButtons.getSelectedYear() ) );			currentMap.show();		}				/**		 * 		 */				private function getMapByYear( year:int ):Map {			return getChildByName( "map" + year + "_mc" ) as Map;		}				/**		 * 		 * @param	value		 */				private function setVisible( value:Boolean ):void {			yearsButtons.visible = value;			worldMap.visible = value;			grid.visible = value;			value ? currentMap.show() : currentMap.hide();		}			}}