package com.svyaznoy {	import com.svyaznoy.events.ProviderEvent;	/**	 * ...	 * @author Sergey Krivtsov (flashgangsta@gmail.com)	 */	public class AchievementsController {				///		static private var instance:AchievementsController;		private var provider:Provider = Provider.getInstance();		private var _isLoaded:Boolean;		private var list:Vector.<Object> = new Vector.<Object>();				/**		 * 		 */				public function AchievementsController() {			if ( instance ) {				throw new Error( "AchievementsController is singletone" );			} else {				instance = this;			}		}				/**		 * 		 * @return		 */				static public function getInstance():AchievementsController {			if ( !instance ) instance = new AchievementsController();			return instance;		}				/**		 * 		 */				public function init():void {			trace( "AchievementsController init" );			provider.getMyAchievements();						if ( !provider.hasEventListener( ProviderEvent.ON_MY_ACHIEVEMENTS ) ) {				provider.addEventListener( ProviderEvent.ON_MY_ACHIEVEMENTS, onMyAchievements );			}					}				/**		 * 		 * @return		 */				public function getList():Vector.<Object> {			return list;		}				/**		 * 		 */				public function get isLoaded():Boolean {			return _isLoaded;		}				/**		 * 		 * @param	event		 */				private function onMyAchievements( event:ProviderEvent ):void {			var list:Array = event.data as Array;			this.list = Vector.<Object>( list );			_isLoaded = true;					}			}}