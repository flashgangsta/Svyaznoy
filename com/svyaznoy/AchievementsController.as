package com.svyaznoy {	import com.svyaznoy.events.ProviderEvent;	import com.svyaznoy.utils.DateParser;	/**	 * ...	 * @author Sergey Krivtsov (flashgangsta@gmail.com)	 */	public class AchievementsController {				///		static private var instance:AchievementsController;		private var provider:Provider = Provider.getInstance();		private var _isLoaded:Boolean;		private var list:Vector.<Object> = new Vector.<Object>();				/**		 * 		 */				public function AchievementsController() {			if ( instance ) {				throw new Error( "AchievementsController is singletone" );			} else {				instance = this;			}		}				/**		 * 		 * @return		 */				static public function getInstance():AchievementsController {			if ( !instance ) instance = new AchievementsController();			return instance;		}				/**		 * 		 */				public function init():void {			trace( "AchievementsController init" );			return;			provider.getMyAchievements();						if ( !provider.hasEventListener( ProviderEvent.ON_MY_ACHIEVEMENTS ) ) {				provider.addEventListener( ProviderEvent.ON_MY_ACHIEVEMENTS, onMyAchievements );			}					}				/**		 * 		 * @return		 */				public function getList():Vector.<Object> {			return list;		}				/**		 * 		 */				public function get isLoaded():Boolean {			return _isLoaded;		}				/**		 * 		 * @param	event		 */				private function onMyAchievements( event:ProviderEvent ):void {			var list:Array = event.data as Array;			var item:Object;			_isLoaded = true;						for ( var i:int = 0; i < list.length; i++ ) {				item = list[ i ];				item.updatedTime = DateParser.parse( item.updated_at ).time;			}						list.sortOn( "updatedTime", Array.NUMERIC );			this.list = Vector.<Object>( list );						showNewAchievementsNotification();		}				/**		 * 		 */				private function showNewAchievementsNotification():void {			var lastLoginTime:int = Helper.getInstance().getUserData().lastLoginDate.time;			var notNotifiedAchievementIndex:int = -1;						for ( var i:int = 0; i < list.length; i++ ) {				if ( list[ i ].updatedTime > lastLoginTime ) {					notNotifiedAchievementIndex = i;					break;				}			}						if ( notNotifiedAchievementIndex !== -1 ) {				for ( var j:int = notNotifiedAchievementIndex; j < list.length; j++ ) {					trace( "Show achievement notify:", list[ j ].type + "_" + list[ j ].level );				}							}		}			}}