package com.svyaznoy {	import com.flashgangsta.managers.MappingManager;	import com.flashgangsta.media.video.YoutubePlayer;	import com.svyaznoy.events.DynamicItemEvent;	import com.svyaznoy.utils.ContentParser;	import flash.display.DisplayObject;	import flash.display.Sprite;		/**	 * ...	 * @author Sergey Krivtsov (flashgangsta@gmail.com)	 */		/**	 * Dispatched when size of container has been changed	 */	[Event(name = "sizeChanged", type = "com.svyaznoy.events.DynamicItemEvent")]		public class DynamicContentViewer extends Sprite {				public static const MARGIN:int = 0;				private var tagsList:Vector.<ContentTag>;		private var _width:int;		private var _height:int;				/**		 * 		 * @param	data		 * @param	width		 */				public function DynamicContentViewer() {			addEventListener( DynamicItemEvent.SIZE_CHANGED, onSizeChanged );		}				/**		 * 		 */				override public function get width():Number {			return _width;		}				override public function set width( value:Number ):void {			_width = value;		}				/**		 * 		 */				override public function get height():Number {			return _height;		}				override public function set height( value:Number ):void {			_height = value;		}				/**		 * 		 * @param	child		 * @return		 */				override public function addChild( child:DisplayObject ):DisplayObject {			var item:DynamicItem = child is DynamicItem ? child as DynamicItem : null;			if ( !item ) throw new Error( "Child has not DynamicItem" );			else super.addChild( item );			return item;		}				/**		 * 		 */				public function clear():void {			while ( numChildren ) {				var item:DynamicItem = getChildAt( 0 ) as DynamicItem;				item.dispose();				removeChild( item );			}		}				/**		 * 		 */				public function displayData( content:String ):void {			var tag:ContentTag;			var item:DynamicItem;			var itemY:int = 0;						tagsList = ContentParser.parse( content );						clear();						for ( var i:int = 0; i < tagsList.length; i++ ) {				tag = tagsList[ i ];				switch( tag.name ) {					case ContentTag.TEXT :						item = new DynamicText( tag.value );						break;					case ContentTag.IMAGE :						item = new DynamicImage( tag.value );						break;					case ContentTag.YOUTUBE :						item = new DynamicVideo( tag.value );						item.x = MappingManager.getCentricPoint( width, item.width );						break;				}								if ( item ) {					addChild( item );					item.y = itemY;					itemY = Math.ceil( itemY + item.height + MARGIN );					item = null;				}			}			dispatchEvent( new DynamicItemEvent( DynamicItemEvent.SIZE_CHANGED ) );		}				/**		 * 		 * @param	event		 */				private function onSizeChanged( event:DynamicItemEvent ):void {			if ( event.target is DynamicImage && event.currentTarget === this ) {				var image:DynamicImage = event.target as DynamicImage;				trace( image );				MappingManager.setScaleByWidthOnlyReduce( image, width );				image.x = MappingManager.getCentricPoint( width, image.width );			}		}	}}