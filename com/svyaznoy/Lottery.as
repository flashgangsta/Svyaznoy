package com.svyaznoy {	import com.flashgangsta.managers.MappingManager;	import com.flashgangsta.media.video.YoutubePlayer;	import com.flashgangsta.utils.NumUtils;	import com.flashgangsta.utils.TimeConverter;	import com.svyaznoy.events.DynamicItemEvent;	import com.svyaznoy.events.IconsListEvent;	import com.svyaznoy.events.ProviderEvent;	import com.svyaznoy.events.ScreenEvent;	import com.svyaznoy.gui.Button;	import com.svyaznoy.utils.DateParser;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.text.TextField;		/**	 * ...	 * @author Sergey Krivtsov (flashgangsta@gmail.com)	 */		public class Lottery extends Screen {				private var titleLabel:TextField;		private var dynamicContentViewer:DynamicContentViewer = new DynamicContentViewer();		private var lotteriesList:LotteriesList;		private var fullDatasList:Array;		private var player:YoutubePlayer;		private var winner:LotteryWinnerPreview;		private var winnerData:Object;		private var lotteriesArchiveList:Array;		private var bottomButton:Button;		private var winnersContainer:Sprite = new Sprite();		private var lotteryLoader:ProviderURLLoader;		private var otherLotteriesLoader:ProviderURLLoader;				/**		 * 		 */				public function Lottery() {			titleLabel = getChildByName( "title_txt" ) as TextField;			lotteriesList = getChildByName( "lotteriesList_mc" ) as LotteriesList;			player = getChildByName( "player_mc" ) as YoutubePlayer;			bottomButton = getChildByName( "bottomButton_mc" ) as Button;						addChild( winnersContainer );						player.visible = false;			winnersContainer.visible = false;			dynamicContentViewer.visible = false;			bottomButton.visible = false;			winnersContainer.visible = false;						lotteriesList.visible = false;			lotteriesList.y = 0;			lotteriesList.addEventListener( IconsListEvent.ICON_SELECTED, onLotteryPreviewSelected );						dynamicContentViewer.width =  titleLabel.width;			addEventListener( DynamicItemEvent.SIZE_CHANGED, onDynamicViewerResized );			addChild( dynamicContentViewer );						provider.addEventListener( ProviderEvent.ON_LOTTERY, onData );			provider.addEventListener( ProviderEvent.ON_LOTTERIES, onOtherLotteriesList );						bottomButton.addEventListener( MouseEvent.CLICK, onBackClicked );		}				/**		 * 		 * @param	lotteryData		 */				public function showLottery( lotteryData:Object ):void {			if ( data && data.id === lotteryData.id ) {				return;			}						player.visible = false;			winnersContainer.visible = false;			dynamicContentViewer.visible = false;			lotteriesList.visible = false;			bottomButton.visible = false;			titleLabel.visible = false;						super.data = lotteryData;			addPreloader();			titleLabel.text = data.title;						addWinners( data.winners as Array );						if ( lotteryLoader ) {				lotteryLoader.dispose();				lotteryLoader = null;			}						if ( otherLotteriesLoader ) {				otherLotteriesLoader.dispose();				otherLotteriesLoader = null;			}						lotteryLoader = provider.getLotteryByID( data.id, "winners.user" );			//otherLotteriesLoader = provider.getLotteries( LotteriesList.DISPLAYED_LENGTH * 2 );		}				/**		 * 		 * @param	winnersList		 */				private function addWinners( winnersList:Array ):void {			var winner:LotteryWinnerPreview;			removeWinners();						if ( !winnersList || !winnersList.length ) return;						for ( var i:int = 0; i < winnersList.length; i++ ) {				winner = new LotteryWinnerPreview();				winnerData = winnersList[ i ];				winner.showWinner( winnerData );				winner.x = Math.round( (winner.width + 10) * (i % 3) );				winner.y = Math.round( winner.height * int( i / 3 ) + 10 );				winnersContainer.addChild( winner );			}						setDisplayItemsAlignment();		}				/**		 * 		 */				private function removeWinners():void {			while ( winnersContainer.numChildren ) {				var winner:LotteryWinnerPreview = winnersContainer.getChildAt( 0 ) as LotteryWinnerPreview;				winner.dispose();				winnersContainer.removeChild( winner );				winner = null;			}		}				/**		 * 		 * @param	event		 */				override protected function onData( event:ProviderEvent ):void {			super.onData( event );			displayData();			removePreloader();		}				/**		 * 		 */				override protected function displayData():void {						super.displayData();						if ( winnerData ) {				var winnersList:Array = data.winners as Array;				if( data.video ) {					player.setVideo( data.video );				}			}						dynamicContentViewer.displayData( data.content );			titleLabel.text = data.title;			setDisplayItemsAlignment();			winnersContainer.visible = Boolean( winnerData );			trace( "winnersContainer.visible = ", Boolean( winnerData ) );			player.visible = Boolean( data.video );			dynamicContentViewer.visible = true;			bottomButton.visible = true;			titleLabel.visible = true;		}				/**		 * 		 * @param	event		 */				private function onBackClicked( event:MouseEvent ):void {			dispatchEvent( new ScreenEvent( ScreenEvent.GO_BACK ) );		}						/**		 * 		 */				private function setDisplayItemsAlignment():void {			dynamicContentViewer.y = MappingManager.getBottom( titleLabel, this );						if ( winnersContainer.numChildren ) {				player.y = MappingManager.getBottom( dynamicContentViewer, this ) + MARGIN;				if ( winnersContainer.numChildren === 1 ) {					winnersContainer.y = player.y;					winnersContainer.x = Math.round( DEFAULT_WIDTH - winnersContainer.width );					//lotteriesList.y = MappingManager.getBottom( player, this ) + ( MARGIN * 2 );					bottomButton.y = MappingManager.getBottom( player, this ) + ( MARGIN * 2 );				} else {					player.x = MappingManager.getCentricPoint( DEFAULT_WIDTH, player.width ) + MARGIN;					winnersContainer.x = MappingManager.getCentricPoint( DEFAULT_WIDTH, winnersContainer.width ) + MARGIN;					if ( !data.video ) {						winnersContainer.y = MappingManager.getBottom( dynamicContentViewer, this ) + MARGIN;					} else {						winnersContainer.y = MappingManager.getBottom( player, this ) + MARGIN;					}					//lotteriesList.y = MappingManager.getBottom( winnersContainer, this ) + ( MARGIN * 2 );					bottomButton.y = MappingManager.getBottom( winnersContainer, this ) + ( MARGIN * 2 );				}			} else {				player.x = 0;				winnersContainer.x = 0;				winnersContainer.y = 0;				player.y = 0;				//lotteriesList.y = MappingManager.getBottom( dynamicContentViewer, this ) + MARGIN;				bottomButton.y = MappingManager.getBottom( dynamicContentViewer, this ) + MARGIN;							}												dispatchHeighUpdated();		}				/**		 * 		 * @param	event		 */				private function onDynamicViewerResized( event:DynamicItemEvent ):void {			setDisplayItemsAlignment();		}				/**		 * 		 * @param	event		 */				private function onOtherLotteriesList( event:ProviderEvent ):void {			var datasList:Array = event.data as Array;			var listToShow:Array = [];			var data:Object;			var currentDate:Date = new Date();			var lotteryDate:Date;						for ( var i:int = 0; i < datasList.length; i++ ) {				data = datasList[ i ];				if ( data.id !== super.data.id && data.winner ) {					listToShow.push( data );				}			}						lotteriesArchiveList = listToShow;						if( listToShow.length ) {				lotteriesList.showList( listToShow );				lotteriesList.visible = true;			}						provider.removeEventListener( ProviderEvent.ON_LOTTERIES, onOtherLotteriesList );			setDisplayItemsAlignment();		}				/**		 * 		 * @param	event		 */				private function onLotteryPreviewSelected( event:IconsListEvent ):void {			player.visible = false;			winner.visible = false;			dynamicContentViewer.visible = false;			lotteriesList.visible = false;			bottomButton.visible = false;			showLottery( event.data );		}			}}