package com.svyaznoy {	import com.svyaznoy.events.ProviderErrorEvent;	import com.svyaznoy.events.ProviderEvent;	import com.svyaznoy.gui.InputTextfield;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;	import flash.globalization.NumberFormatter;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.net.URLRequestMethod;	import flash.net.URLVariables;	import flash.utils.ByteArray;	import ru.inspirit.net.events.MultipartURLLoaderEvent;	import ru.inspirit.net.MultipartURLLoader;		/**	 * ...	 * @author Sergey Krivtsov (flashgangsta@gmail.com)	 */		[Event(name="onAbout", type="com.svyaznoy.events.ProviderEvent")]	[Event(name="onDeparture", type="com.svyaznoy.events.ProviderEvent")]	[Event(name="onDeparturesList", type="com.svyaznoy.events.ProviderEvent")]	[Event(name="onEmployeeConfirmed", type="com.svyaznoy.events.ProviderEvent")]	[Event(name="onEmployeeSet", type="com.svyaznoy.events.ProviderEvent")]	[Event(name="onGalleryPhotos", type="com.svyaznoy.events.ProviderEvent")]	[Event(name="onIntroData", type="com.svyaznoy.events.ProviderEvent")]	[Event(name="onLastGalleries", type="com.svyaznoy.events.ProviderEvent")]	[Event(name="onLastVideos", type="com.svyaznoy.events.ProviderEvent")]	[Event(name="onLegend", type="com.svyaznoy.events.ProviderEvent")]	[Event(name="onLoadStart", type="com.svyaznoy.events.ProviderEvent")]	[Event(name="onLoggedIn", type="com.svyaznoy.events.ProviderEvent")]	[Event(name="onLotteries", type="com.svyaznoy.events.ProviderEvent")]	[Event(name="onLottery", type="com.svyaznoy.events.ProviderEvent")]	[Event(name="onNewsDetail", type="com.svyaznoy.events.ProviderEvent")]	[Event(name="onNewsList", type="com.svyaznoy.events.ProviderEvent")]	[Event(name="onRandomGalleries", type="com.svyaznoy.events.ProviderEvent")]	[Event(name="onRandomSurveys", type="com.svyaznoy.events.ProviderEvent")]	[Event(name="onRandomVideos", type="com.svyaznoy.events.ProviderEvent")]	[Event(name="onThermsOfMotivation", type="com.svyaznoy.events.ProviderEvent")]	[Event(name="onVideoReport", type="com.svyaznoy.events.ProviderEvent")]	[Event(name="onRatings", type="com.svyaznoy.events.ProviderEvent")]	[Event(name="onEmployeesLength", type="com.svyaznoy.events.ProviderEvent")]		public class Provider extends EventDispatcher {		static private var instance:Provider;				private const TEST_APP_ID:int = 3810635;		private const TEST_SERVER:String = "http://192.241.136.228/";		private const SERVER_ADDRESS:String = "http://es.svyaznoy.ru/";		private const API_DIRECTORY:String = "api/v1/";				private const METHOD_LOGIN:String = 					"login";		private const METHOD_SET_EMPLOYEE:String = 				"login/employee";		private const METHOD_CONFIRM_EMPLOYEE:String = 			"login/employee/confirm";		private const METHOD_DISABLE_INTRO:String = 			"me/disable-intro";		private const METHOD_GET_PAGE:String =		 			"content/pages";		private const METHOD_GET_INTRO_FOR_EMPLOYEE:String =	"content/pages/intro-employee";		private const METHOD_GET_INTRO_FOR_GUEST:String = 		"content/pages/intro";		private const METHOD_GET_NEWS:String =		 			"content/news";		private const METHOD_GET_DEPARTURE:String =		 		"departures";		private const METHOD_GET_RANDOM_GALLERIES:String =		"departures/galleries/random";		private const METHOD_GET_LAST_GALLERIES:String =		"departures/galleries/last";		private const METHOD_GET_RANDOM_VIDEOS:String =			"departures/videos/random";		private const METHOD_GET_LAST_VIDEOS:String =			"departures/videos/last";		private const METHOD_GET_SURVEYS:String =				"surveys/random";		private const METHOD_GET_LOTTERY:String = 				"lotteries";		private const METHOD_GET_EMPLOYEE:String = 				"employees";		private const METHOD_GET_RATINGS:String = 				"employees/rating";		private const METHOD_GET_EMPLOEES_LENGTH:String = 		"employees/count";		private const METHOD_GET_OWNER_RATING:String = 			"me/rating";		private const METHOD_SEND_ANSWER:String = 				"surveys";		private const METHOD_GET_ANSWERS:String = 				"surveys";		private const METHOD_GET_OWNER_ALBUMS:String = 			"me/photos";		private const METHOD_UPLOAD_PHOTO:String = 				"me/photos";		private const METHOD_UPDATE_PHOTO:String = 				"me/photo-update";		private const METHOD_DELETE_PHOTO:String = 				"me/photo-delete";		private const METHOD_GET_EMPLOYEES_PHOTOS:String = 		"employees-photos";		private const METHOD_GET_SETTINGS:String = 				"settings";		private const METHOD_GET_LAST_ANNOUNCEMENT:String = 	"content/anonces/last";		private const METHOD_GET_ANNOUNCEMENT:String = 			"content/anonces";		private const METHOD_COMMENTS:String = 					"comments";		private const METHOD_GET_COMMENTS_COUNT:String = 		"comments/count";		private const METHOD_GET_TESTS:String = 				"tests";		private const METHOD_GET_MY_ACHIEVEMENTS:String = 		"me/achivements";		private const METHOD_CONFIRM_ENTRY_BY_INVITE:String = 	"me/invited";		private const METHOD_SET_LAST_SEEN_ACHIEVEMENT:String = "me/achivements";		private const METHOD_GET_CONTESTS:String = 				"competitions";		private const METHOD_GET_CONTEST_WORKS_LIST:String = 	"works";		private const METHOD_ADD_WORK_TO_CONTEST:String =		"works";		private const METHOD_GET_COMPLETED_TEST:String = 		"answer";				private var apiAddress:String;		private var errors:Errors = Errors.getInstance();		private var helper:Helper = Helper.getInstance();				/**		 * 		 */				public function Provider() {			if ( !instance ) {				instance = this;			}			else throw new Error( "Provider has singletone" );		}				/**		 * 		 * @return		 */				public static function getInstance():Provider {			if ( !instance ) instance = new Provider();			return instance;		}				/**		 * 		 */				public function init():void {			apiAddress = ( helper.isDebug || helper.getAppID() === TEST_APP_ID ? TEST_SERVER : SERVER_ADDRESS ) + API_DIRECTORY;		}				/**		 * LOGIN		 */						public function login():ProviderURLLoader {			var loader:ProviderURLLoader = new ProviderURLLoader();			var request:URLRequest = new URLRequest( apiAddress + METHOD_LOGIN );			loader.completeHandler = onLoginResponse;			loader.errorHandler = errors.loginError;			return startLoad( loader, request );					}				/**		 * 		 */				private function onLoginResponse( data:Object, loader:ProviderURLLoader ):void {			dispatchComplete( ProviderEvent.ON_LOGGED_IN, data, loader );		}				/**		 * 		 * @param	code		 * @param	email		 */				public function setEmployee( code:String, email:String ):ProviderURLLoader {			var loader:ProviderURLLoader = new ProviderURLLoader();			var request:URLRequest = new URLRequest( apiAddress + METHOD_SET_EMPLOYEE );			var params:URLVariables = new URLVariables();						params.barcode = code;			params.email = email;						request.method = URLRequestMethod.POST;			request.data = params;						loader.completeHandler = onSetEmployeeResponse;			loader.errorHandler = onSetEmployeeError;			return startLoad( loader, request );		}				private function onSetEmployeeError( data:Object ):void {			errors.setEmployeeError( data );			if ( data.code === 404 ) {				dispatchEvent( new ProviderErrorEvent( ProviderErrorEvent.ON_EMPLOYEE_SET_ERROR ) );			}		}				private function onSetEmployeeResponse( data:Object, loader:ProviderURLLoader ):void {			dispatchComplete( ProviderEvent.ON_EMPLOYEE_SET, data, loader );		}				/**		 * 		 * @param	code		 */				public function confirmEmployee( code:String ):ProviderURLLoader {			var loader:ProviderURLLoader = new ProviderURLLoader();			var request:URLRequest = new URLRequest( apiAddress + METHOD_CONFIRM_EMPLOYEE );			var params:URLVariables = new URLVariables();						params.code = code;						request.method = URLRequestMethod.POST;			request.data = params;						loader.completeHandler = onEmployeeConfirmed;			loader.errorHandler = onEmployeeConfirmationError;						return startLoad( loader, request );		}				private function onEmployeeConfirmationError( data:Object ):void {			errors.setEmployeeConfirmationError( data );			if ( data.code === 404 ) {				dispatchEvent( new ProviderErrorEvent( ProviderErrorEvent.ON_EMPLOYEE_CONFIRMATION_ERROR ) );			}		}				private function onEmployeeConfirmed( data:Object, loader:ProviderURLLoader ):void {			dispatchComplete( ProviderEvent.ON_EMPLOYEE_CONFIRMED, data, loader );		}				/**		 * 		 */				public function dispableIntro():ProviderURLLoader {			var loader:ProviderURLLoader = new ProviderURLLoader();			var request:URLRequest = new URLRequest( apiAddress + METHOD_DISABLE_INTRO );						loader.errorHandler = errors.onDisableIntroError;			return startLoad( loader, request );		}				/**		 * 		 */				public function getIntro( forGuestForcibly:Boolean = false ):ProviderURLLoader {			var loader:ProviderURLLoader = new ProviderURLLoader();			var method:String;			var request:URLRequest;						if ( helper.getUserData().employee && helper.isEmployeeMode && !forGuestForcibly ) {				method = METHOD_GET_INTRO_FOR_EMPLOYEE;			} else {				method = METHOD_GET_INTRO_FOR_GUEST;			}						request = new URLRequest( apiAddress + method );						loader.completeHandler = onIntroData;			loader.errorHandler = errors.onIntroDataError;			return startLoad( loader, request );		}				private function onIntroData( data:Object, loader:ProviderURLLoader ):void {			dispatchComplete( ProviderEvent.ON_INTRO_DATA, data, loader );		}				/**		 * 		 * @param	limit		 * @param	offset		 */				public function getNewsList( limit:int = 10, offset:int = 0 ):ProviderURLLoader {			var loader:ProviderURLLoader = new ProviderURLLoader();			var request:URLRequest = new URLRequest( apiAddress + METHOD_GET_NEWS );			var params:URLVariables = new URLVariables();						params.limit = limit;			params.offset = offset;			params.order = "date:desc";						request.data = params;						loader.completeHandler = onNewsList;			loader.errorHandler = errors.onNewsListError;			return startLoad( loader, request );		}				private function onNewsList( data:Object, loader:ProviderURLLoader ):void {			dispatchComplete( ProviderEvent.ON_NEWS_LIST, data, loader );		}				/**		 * 		 * @param	id		 */				public function getNewsDetail( id:int ):ProviderURLLoader {			var loader:ProviderURLLoader = new ProviderURLLoader();			var request:URLRequest = new URLRequest( apiAddress + METHOD_GET_NEWS + "/" + id );						loader.completeHandler = onNewsDetail;			loader.errorHandler = errors.onNewsDetailError;			return startLoad( loader, request );		}				private function onNewsDetail( data:Object, loader:ProviderURLLoader ):void {			dispatchComplete( ProviderEvent.ON_NEWS_DETAIL, data, loader );		}				/**		 * 		 */				public function getLegend():ProviderURLLoader {			return getPageByName( "legenda", onLegend, errors.getLegendError );		}				private function onLegend( data:Object, loader:ProviderURLLoader ):void {			dispatchComplete( ProviderEvent.ON_LEGEND, data, loader );		}				/**		 * 		 */				public function getAbout():ProviderURLLoader {			return getPageByName( "about", onAbout, errors.getAboutError );		}				private function onAbout( data:Object, loader:ProviderURLLoader ):void {			dispatchComplete( ProviderEvent.ON_ABOUT, data, loader );		}				/**		 * 		 */				public function getThermsOfMotivation():ProviderURLLoader {			return getPageByName( "legenda-terms", onThermsOfMotivation, errors.getThermsOfMotivationError );		}				private function onThermsOfMotivation( data:Object, loader:ProviderURLLoader ):void {			dispatchComplete( ProviderEvent.ON_THERMS_OF_MOTIVATION, data, loader );		}				/**		 * Список выездов объккт содержит параметры:			 * 	"id": "1",                "title": "Россия (Санкт-Петербург)",                "year": "2010",                "start": null,                "galleries": [],                "videos": [],                "full_title": "Россия (Санкт-Петербург) — 2010",                "image_with_path": ""						 * @param	year пустой параметр вернет все года		 * @param	fields	интересующие поля :			 * videos списки видео,			 * galleries списки фотогалерей			 * galleries.photos списки фотографий		 */				public function getDeparturesList( year:String = null, fields:String = "galleries,videos,galleries.photos" ):ProviderURLLoader {			var loader:ProviderURLLoader = new ProviderURLLoader();			var request:URLRequest = new URLRequest( apiAddress + METHOD_GET_DEPARTURE );			var params:URLVariables = new URLVariables();						if( fields ) params.load = fields;			if ( year ) params[ "filter[]" ] = "year:" + year;						request.data = params;						loader.errorHandler = errors.onDeparturesListError;			loader.completeHandler = onDeparturesList;			return startLoad( loader, request );		}				private function onDeparturesList( data:Object, loader:ProviderURLLoader ):void {			dispatchComplete( ProviderEvent.ON_DEPARTURES_LIST, data, loader );		}				/**		 * 		 * @param	id		 * @param	fields	интересующие поля :			 * videos списки видео,			 * galleries списки фотогалерей			 * galleries.photos списки фотографий		 */				public function getDeparture( id:int, fields:String = "galleries,videos,galleries.photos" ):ProviderURLLoader {			var loader:ProviderURLLoader = new ProviderURLLoader();			var request:URLRequest = new URLRequest( apiAddress + METHOD_GET_DEPARTURE + "/" + id );			var params:URLVariables;						if ( fields ) {				params = new URLVariables();				params.load = fields;				request.data = params;			}									loader.errorHandler = errors.onDepartureError;			loader.completeHandler = onDeparture;			return startLoad( loader, request );		}				private function onDeparture( data:Object, loader:ProviderURLLoader ):void {			dispatchComplete( ProviderEvent.ON_DEPARTURE, data, loader );		}				/**		 * 		 */				public function getRandomGalleries( quantity:int = 1 ):ProviderURLLoader {			var loader:ProviderURLLoader = new ProviderURLLoader();			var request:URLRequest = new URLRequest( apiAddress + METHOD_GET_RANDOM_GALLERIES + "/" + quantity );						loader.errorHandler = errors.onRandomGalleriesError;			loader.completeHandler = onRandomGalleries;			return startLoad( loader, request );		}				private function onRandomGalleries( data:Object, loader:ProviderURLLoader ):void {			dispatchComplete( ProviderEvent.ON_RANDOM_GALLERIES, data, loader );		}				/**		 * 		 */				public function getRandomVideos( quantity:int = 1 ):ProviderURLLoader {			var loader:ProviderURLLoader = new ProviderURLLoader();			var request:URLRequest = new URLRequest( apiAddress + METHOD_GET_RANDOM_VIDEOS + "/" + quantity );			loader.errorHandler = errors.onRandomVideosError;			loader.completeHandler = onRandomVideos;			return startLoad( loader, request );		}				private function onRandomVideos( data:Object, loader:ProviderURLLoader ):void {			dispatchComplete( ProviderEvent.ON_RANDOM_VIDEOS, data, loader );		}				/**		 * 		 */				public function getLastGalleries( quantity:int = 1 ):ProviderURLLoader {			var loader:ProviderURLLoader = new ProviderURLLoader();			var request:URLRequest = new URLRequest( apiAddress + METHOD_GET_LAST_GALLERIES + "/" + quantity );						loader.errorHandler = errors.onLastGalleriesError;			loader.completeHandler = onLastGalleries;			return startLoad( loader, request );		}				private function onLastGalleries( data:Object, loader:ProviderURLLoader ):void {			dispatchComplete( ProviderEvent.ON_LAST_GALLERIES, data, loader );		}				/**		 * 		 */				public function getLastVideos( quantity:int = 1 ):ProviderURLLoader {			var loader:ProviderURLLoader = new ProviderURLLoader();			var request:URLRequest = new URLRequest( apiAddress + METHOD_GET_LAST_VIDEOS + "/" +  quantity );			loader.errorHandler = errors.onLastVideosError;			loader.completeHandler = onLastVideos;			return startLoad( loader, request );		}				private function onLastVideos( data:Object, loader:ProviderURLLoader ):void {			dispatchComplete( ProviderEvent.ON_LAST_VIDEOS, data, loader );		}				/**		 * 		 * @param	id		 */				public function getVideoReportByID( id:int ):ProviderURLLoader {			var loader:ProviderURLLoader = new ProviderURLLoader();			var request:URLRequest = new URLRequest( apiAddress + METHOD_GET_DEPARTURE + "/" + id );			var params:URLVariables = new URLVariables();						params.load = "videos";						request.data = params;						loader.errorHandler = errors.onGetDepartureError;			loader.completeHandler = onVideoReport;			return startLoad( loader, request );		}				private function onVideoReport( data:Object, loader:ProviderURLLoader ):void {			dispatchComplete( ProviderEvent.ON_VIDEO_REPORT, data, loader );		}				/**		 * 		 * @param	departure_id		 * @param	gallery_id		 * @param	fields		 */				public function getGalleryPhotos( departure_id:int, gallery_id:int ):ProviderURLLoader {			var loader:ProviderURLLoader = new ProviderURLLoader();			var request:URLRequest = new URLRequest( apiAddress + METHOD_GET_DEPARTURE + "/" + departure_id + "/galleries/" + gallery_id );			var params:URLVariables = new URLVariables();						params.load = "photos";						request.data = params;						loader.errorHandler = errors.onGetGalleryPhotosError;			loader.completeHandler = onGalleryPhotos;			return startLoad( loader, request );		}				private function onGalleryPhotos( data:Object, loader:ProviderURLLoader ):void {			dispatchComplete( ProviderEvent.ON_GALLERY_PHOTOS, data, loader );		}				/**		 * 		 * @param	quantity		 */				public function getRandomSurveys( quantity:int = 1 ):ProviderURLLoader {			var loader:ProviderURLLoader = new ProviderURLLoader();			var request:URLRequest = new URLRequest( apiAddress + METHOD_GET_SURVEYS + "/" + quantity );						loader.errorHandler = errors.onGetRandomSurveysError;			loader.completeHandler = onRandomSurveys;			return startLoad( loader, request );		}				private function onRandomSurveys( data:Object, loader:ProviderURLLoader ):void {			dispatchComplete( ProviderEvent.ON_RANDOM_SURVEYS, data, loader );		}				/**		 * 		 * @param	object		 * @param	answer		 */				public function sendAnswer( surveyID:int, answer:String ):ProviderURLLoader {			var loader:ProviderURLLoader = new ProviderURLLoader();			var request:URLRequest = new URLRequest( apiAddress + METHOD_SEND_ANSWER + "/" + surveyID + "/" + "answers" );			var urlVars:URLVariables = new URLVariables();						urlVars.answer = answer;						request.data = urlVars;			request.method = URLRequestMethod.POST;						loader.errorHandler = errors.onSendAnswerError;			loader.completeHandler = onAnswerSent;			return startLoad( loader, request );		}				private function onAnswerSent( data:Object, loader:ProviderURLLoader ):void {			dispatchComplete( ProviderEvent.ON_ANSWER_SENT, data, loader );		}				/**		 * 		 * @param	object		 */				public function getAnswers( surveyID:int ):ProviderURLLoader {			var loader:ProviderURLLoader = new ProviderURLLoader();			var request:URLRequest = new URLRequest( apiAddress + METHOD_GET_ANSWERS + "/" + surveyID + "/" + "answers" );			var urlVars:URLVariables = new URLVariables();						urlVars.group = "answer";			urlVars.order = "votes:desc";						request.data = urlVars;						loader.errorHandler = errors.onGetAnswersError;			loader.completeHandler = onAnswers;			return startLoad( loader, request );		}				private function onAnswers( data:Object, loader:ProviderURLLoader ):void {			dispatchComplete( ProviderEvent.ON_ANSWERS, data, loader );		}				/**		 * 		 */				public function getLotteries( limit:int = 0, offset:int = 0 ):ProviderURLLoader {			var loader:ProviderURLLoader = new ProviderURLLoader();			var request:URLRequest = new URLRequest( apiAddress + METHOD_GET_LOTTERY );			var urlVars:URLVariables = new URLVariables();						urlVars.order = "date:desc";			urlVars.load = "winner.user";			if ( limit ) urlVars.limit = limit;			if ( offset ) urlVars.offset = offset;						request.data = urlVars						loader.errorHandler = errors.onGetLotteriesError;			loader.completeHandler = onLotteries;			return startLoad( loader, request );		}				private function onLotteries( data:Object, loader:ProviderURLLoader ):void {			dispatchComplete( ProviderEvent.ON_LOTTERIES, data, loader );		}				/**		 * 		 * @param	id		 */				public function getLotteryByID( id:int ) {			var loader:ProviderURLLoader = new ProviderURLLoader();			var request:URLRequest = new URLRequest( apiAddress + METHOD_GET_LOTTERY + "/" + id );			loader.errorHandler = errors.onGetLotteriesByIDError;			loader.completeHandler = onLottery;			return startLoad( loader, request );		}				private function onLottery( data:Object, loader:ProviderURLLoader ):void {			dispatchComplete( ProviderEvent.ON_LOTTERY, data, loader );		}				/**		 * 		 * @param	id		 */				public function getEmployeeByID( id:int ):ProviderURLLoader {			var loader:ProviderURLLoader = new ProviderURLLoader();			var request:URLRequest = new URLRequest( apiAddress + METHOD_GET_EMPLOYEE + "/" + id );			var urlVars:URLVariables = new URLVariables();						urlVars.load = "user";			request.data = urlVars;						loader.errorHandler = errors.onGetEmployeeByIDError;			loader.completeHandler = onEmployeeByID;			return startLoad( loader, request );		}				private function onEmployeeByID( data:Object, loader:ProviderURLLoader ):void {			dispatchComplete( ProviderEvent.ON_EMPLOYEE_DATA, data, loader );		}				/**		 * Возврощает список рейтингов		 * @param	limit		 * @param	offset		 * @param	positionSort сортировка по позиции. Допустимые значения Array.NUMERIC, Array.DESCENDING, null		 */				public function getRatings( limit:int = 1, offset:int = 0, sort:uint = Array.NUMERIC ):ProviderURLLoader {			var loader:ProviderURLLoader = new ProviderURLLoader();			var request:URLRequest = new URLRequest( apiAddress + METHOD_GET_RATINGS );			var urlVars:URLVariables = new URLVariables();						var orderRules:Array = [];						/*if ( checkSortMethodOnValid( positionSort ) ) {				//orderRules.push( "position:" + getSortMethodInAPIFormat( positionSort ) );							}*/						if ( sort === Array.NUMERIC ) {				orderRules.push( "rating:desc" );				orderRules.push( "created_at:asc" );				orderRules.push( "id:asc" );			} else {				orderRules.push( "rating:asc" );				orderRules.push( "created_at:desc" );				orderRules.push( "id:desc" );			}						urlVars.order = orderRules.toString();			if( limit ) urlVars.limit = limit;			urlVars.offset = offset;			request.data = urlVars;						loader.errorHandler = errors.onGetRatingsError;			loader.completeHandler = onRatings;			return startLoad( loader, request );		}					private function onRatings( data:Object, loader:ProviderURLLoader ):void {			dispatchComplete( ProviderEvent.ON_RATINGS, data, loader );		}				/**		 * 		 * @param	lastName		 * @param	firstName		 * @param	middleName		 * @param	limit		 * @param	offset		 * @param	positionSort		 * @return		 */				public function searchRatings( lastName:String, firstName:String = "", middleName:String = "", limit:int = 1, offset:int = 0, sort:uint = Array.NUMERIC ):ProviderURLLoader {			var loader:ProviderURLLoader = new ProviderURLLoader();			var request:URLRequest = new URLRequest( apiAddress + METHOD_GET_RATINGS );			var urlVars:URLVariables = new URLVariables();			var searchParam:String;						var orderRules:Array = [];						/*if ( checkSortMethodOnValid( positionSort ) ) {				orderRules.push( "position:" + getSortMethodInAPIFormat( positionSort ) );			}*/						if ( sort === Array.NUMERIC ) {				orderRules.push( "rating:desc" );				orderRules.push( "created_at:asc" );				orderRules.push( "id:asc" );			} else {				orderRules.push( "rating:asc" );				orderRules.push( "created_at:desc" );				orderRules.push( "id:desc" );			}						searchParam = "last_name:" + lastName;			searchParam += ",first_name:" + (firstName ? firstName : lastName);			searchParam += ",middle_name:" + (middleName ? middleName : lastName);						urlVars.order = orderRules.toString();			urlVars.search = searchParam;			if ( limit ) urlVars.limit = limit;			urlVars.offset = offset;						request.data = urlVars;						loader.errorHandler = errors.onSearchRatingsError;			loader.completeHandler = onRatingsSearched;			return startLoad( loader, request );		}				private function onRatingsSearched( data:Object, loader:ProviderURLLoader ):void {			dispatchComplete( ProviderEvent.ON_RATINGS_SEARCHED, data, loader );		}				/**		 * 		 */				public function getEmploeeLength():ProviderURLLoader {			var loader:ProviderURLLoader = new ProviderURLLoader();			var request:URLRequest = new URLRequest( apiAddress + METHOD_GET_EMPLOEES_LENGTH );			loader.errorHandler = errors.onGetEmployeesLengthError;			loader.completeHandler = onEmployeesLength;			return startLoad( loader, request );		}				private function onEmployeesLength( data:Object, loader:ProviderURLLoader ):void {			dispatchComplete( ProviderEvent.ON_EMPLOYEES_LENGTH, data, loader );		}				/**		 * 		 * @return		 */				public function getOwnerRating():ProviderURLLoader {			var loader:ProviderURLLoader = new ProviderURLLoader();			var request:URLRequest = new URLRequest( apiAddress + METHOD_GET_OWNER_RATING );			loader.errorHandler = errors.onGetOwnerRatingError;			loader.completeHandler = onOwnerRating;			return startLoad( loader, request );		}				private function onOwnerRating( data:Object, loader:ProviderURLLoader ):void {			dispatchComplete( ProviderEvent.ON_OWNER_RATING, data, loader );					}				/**		 * 		 */				public function getOwnerAlbums():ProviderURLLoader {			var loader:ProviderURLLoader = new ProviderURLLoader();			var request:URLRequest = new URLRequest( apiAddress + METHOD_GET_OWNER_ALBUMS );			loader.errorHandler = errors.onGetOwnerAlbumsError;			loader.completeHandler = onGetOwnerAlbums;			return startLoad( loader, request );		}				private function onGetOwnerAlbums( data:Object, loader:ProviderURLLoader ):void {			dispatchComplete( ProviderEvent.ON_OWNER_ALBUMS, data, loader );		}				/**		 * 		 */				public function uploadPhoto( photo:ByteArray, message:String, departureID:String ):MultipartURLLoader {			var loader:MultipartURLLoader = new MultipartURLLoader();			var request:String = apiAddress + METHOD_UPLOAD_PHOTO;			request += "?auth_key=" + helper.getAuthKey();			request += "&user_id=" + helper.getUserID();			request += "&is_employee=" + int( helper.isEmployeeMode );						loader.addVariable( "anonce", message );			loader.addVariable( "departure_id", departureID );			loader.addFile( photo, "image.jpg", "photo", "image/jpg" );						loader.addEventListener( Event.COMPLETE, onPhotoUploaded );			loader.load( request );			return loader;		}				/**		 * 		 * @param	event		 */				private function onPhotoUploaded( event:Event ):void {			var loader:MultipartURLLoader = event.target as MultipartURLLoader;			var data:Object = JSON.parse( loader.loader.data ).response.data;			loader.removeEventListener( Event.COMPLETE, onPhotoUploaded );			loader.dispose();			loader = null;						dispatchComplete( ProviderEvent.ON_PHOTO_UPLOADED, data );		}				/**		 * 		 * @param	photoID		 * @param	newAnonce		 * @param	newDeparture		 */				public function updatePhoto( photoID:String, newAnonce:String, newDeparture:String ):ProviderURLLoader {			var loader:ProviderURLLoader = new ProviderURLLoader();			var request:URLRequest = new URLRequest( apiAddress + METHOD_UPDATE_PHOTO + "/" + photoID );			var params:URLVariables = new URLVariables();						if( newAnonce ) params.anonce = newAnonce;			if( newDeparture ) params.departure_id = newDeparture;						request.method = URLRequestMethod.POST;			request.data = params;						loader.completeHandler = onPhotoUpdated;			loader.errorHandler = errors.onUpdatePhotoError;			return startLoad( loader, request );		}				private function onPhotoUpdated( data:Object, loader:ProviderURLLoader ):void {			dispatchComplete( ProviderEvent.ON_PHOTO_UPDATED, data, loader );		}				/**		 * 		 * @param	photoID		 */				public function deletePhoto( photoID:String ):ProviderURLLoader {			var loader:ProviderURLLoader = new ProviderURLLoader();			var request:URLRequest = new URLRequest( apiAddress + METHOD_DELETE_PHOTO + "/" + photoID );			request.method = URLRequestMethod.POST;			request.data = { };			loader.errorHandler = errors.onDeletePhotoError;			loader.completeHandler = onPhotoDeleted;			return startLoad( loader, request );		}				private function onPhotoDeleted( data:Object, loader:ProviderURLLoader ):void {			dispatchComplete( ProviderEvent.ON_PHOTO_DELETED, data, loader );		}				/**		 * 		 */				public function getEmployeesPhotos( departure_id:String ):ProviderURLLoader {			var loader:ProviderURLLoader = new ProviderURLLoader();			var request:URLRequest = new URLRequest( apiAddress + METHOD_GET_DEPARTURE + "/" + departure_id + "/" + METHOD_GET_EMPLOYEES_PHOTOS );			loader.errorHandler = errors.onEmployeesPhotosError;			loader.completeHandler = onEmployeesPhotos;			return startLoad( loader, request );		}				private function onEmployeesPhotos( data:Object, loader:ProviderURLLoader ):void {			dispatchComplete( ProviderEvent.ON_EMPLOYEES_PHOTOS, data, loader );		}				/**		 * 		 * @return		 */				public function getSettings():ProviderURLLoader {			var loader:ProviderURLLoader = new ProviderURLLoader();			var request:URLRequest = new URLRequest( apiAddress + METHOD_GET_SETTINGS );			loader.errorHandler = errors.onSettingsError;			loader.completeHandler = onSettings;			return startLoad( loader, request );		}				private function onSettings( data:Object, loader:ProviderURLLoader ):void {			dispatchComplete( ProviderEvent.ON_SETTINGS, data, loader );		}				/**		 * 		 */				public function getLastAnnouncement():ProviderURLLoader {			var loader:ProviderURLLoader = new ProviderURLLoader();			var request:URLRequest = new URLRequest( apiAddress + METHOD_GET_LAST_ANNOUNCEMENT + "/1" );			loader.errorHandler = errors.onLastAnnouncementError;			loader.completeHandler = onLastAnnouncement;			return startLoad( loader, request );		}				/**		 * 		 * @param	data		 * @param	loader		 */				private function onLastAnnouncement( data:Object, loader:ProviderURLLoader ):void {			dispatchComplete( ProviderEvent.ON_LAST_ANNOUNCEMENT, data, loader );		}				/**		 * 		 * @param	id		 */				public function getAnnouncementByID( id:int ):ProviderURLLoader {			var loader:ProviderURLLoader = new ProviderURLLoader();			var request:URLRequest = new URLRequest( apiAddress + METHOD_GET_ANNOUNCEMENT + "/" + id );			loader.errorHandler = errors.onAnnouncementError;			loader.completeHandler = onAnnouncement;			return startLoad( loader, request );		}				private function onAnnouncement( data:Object, loader:ProviderURLLoader ):void {			dispatchComplete( ProviderEvent.ON_ANNOUNCEMENT, data, loader );		}				/**		 * 		 * @param	newsID		 * @param	limit		 * @param	offset		 * @param	fromValueToGreater		 * @param	fromValueToLess		 * @return		 */				public function getNewsCommentsList( newsID:int, limit:int = 10, offset:int = 0, fromValueToGreater:Number = 0, fromValueToLess:Number = 0 ):ProviderURLLoader {			var url:String = apiAddress + METHOD_GET_NEWS + "/" + newsID + "/" + METHOD_COMMENTS;			return getComments( url, limit, offset, fromValueToGreater, fromValueToLess );		}				/**		 * 		 * @param	departureID		 * @param	galleryID		 * @param	photoID		 * @param	limit		 * @param	offset		 * @param	fromValueToGreater		 * @param	fromValueToLess		 * @return		 */				public function getGalleriesCommentsList( departureID:int, galleryID:int, photoID:int, limit:int = 10, offset:int = 0, fromValueToGreater:int = 0, fromValueToLess:int = 0 ):ProviderURLLoader {			var url:String = apiAddress + METHOD_GET_DEPARTURE + "/" + departureID + "/galleries/" + galleryID + "/photos/" + photoID + "/" + METHOD_COMMENTS;			return getComments( url, limit, offset, fromValueToGreater, fromValueToLess );		}				/**		 * 		 * @param	departureID		 * @param	photoID		 */				public function getEmployeePhotosCommentsList( departureID:int, photoID:int, limit:int = 10, offset:int = 0, fromValueToGreater:int = 0, fromValueToLess:int = 0 ):ProviderURLLoader {			var url:String = apiAddress + METHOD_GET_DEPARTURE + "/" + departureID + "/employees-photos/" + photoID + "/" + METHOD_COMMENTS;			return getComments( url, limit, offset, fromValueToGreater, fromValueToLess );		}				/**		 * 		 * @param	contestID		 * @param	workID		 */				public function getContestCommentsList( contestID:int, workID:int, limit:int = 10, offset:int = 0, fromValueToGreater:int = 0, fromValueToLess:int = 0  ):ProviderURLLoader {			var url:String = apiAddress + METHOD_GET_CONTESTS + "/" + contestID + "/works/" + workID + "/" + METHOD_COMMENTS;			return getComments( url, limit, offset, fromValueToGreater, fromValueToLess );		}				/**		 * 		 * @param	departureID		 * @param	videoID		 * @param	limit		 * @param	offset		 * @param	fromValueToGreater		 * @param	fromValueToLess		 * @return		 */				public function getVideoCommentsList( departureID:int, videoID:int, limit:int = 10, offset:int = 0, fromValueToGreater:int = 0, fromValueToLess:int = 0  ):ProviderURLLoader {			var url:String = apiAddress + METHOD_GET_DEPARTURE + "/" + departureID + "/videos/" + videoID + "/" + METHOD_COMMENTS;			return getComments( url, limit, offset, fromValueToGreater, fromValueToLess );		}				/**		 * 		 * @param	departureID		 * @param	limit		 * @param	offset		 * @param	fromValueToGreater		 * @param	fromValueToLess		 * @return		 */				public function getDepartureCommentsList( departureID:int, limit:int = 10, offset:int = 0, fromValueToGreater:int = 0, fromValueToLess:int = 0  ):ProviderURLLoader {			var url:String = apiAddress + METHOD_GET_DEPARTURE + "/" + departureID + "/" + METHOD_COMMENTS;			return getComments( url, limit, offset, fromValueToGreater, fromValueToLess );		}				private function getComments( url:String, limit:int, offset:int, fromValueToGreater:Number, fromValueToLess:Number ):ProviderURLLoader {			var loader:ProviderURLLoader = new ProviderURLLoader();			var request:URLRequest = new URLRequest( url );			var params:URLVariables = new URLVariables();			var filter:Array = [];						params.load = "employee";			params.order = "created_at:desc";			params.limit = limit;						if ( fromValueToGreater ) filter.push( "id:>:" + int( fromValueToGreater ) );			if ( fromValueToLess ) filter.push( "id:<:" + int( fromValueToLess ) );						if ( !fromValueToGreater && !fromValueToLess ) {				//Нету фильтров				params.offset = offset;			}						if( filter.length ) params.filter = filter.toString();						request.data = params;						loader.errorHandler = errors.onCommentsListError;			loader.completeHandler = onCommentsList;			return startLoad( loader, request );		}				private function onCommentsList( data:Object, loader:ProviderURLLoader ):void {			dispatchComplete( ProviderEvent.ON_COMMENTS_LIST, data, loader );		}				/**		 * 		 * @param	newsID		 * @return		 */				public function getNewsCommentsCount( newsID:int ):ProviderURLLoader {			var url:String = apiAddress + METHOD_GET_NEWS + "/" + newsID + "/" + METHOD_GET_COMMENTS_COUNT;			return getCommentsCount( url );		}				/**		 * 		 * @param	galleryID		 * @return		 */				public function getGalleriesCommentsCount( departureID:int, galleryID:int, photoID:int ):ProviderURLLoader {			var url:String = apiAddress + METHOD_GET_DEPARTURE + "/" + departureID + "/galleries/" + galleryID + "/photos/" + photoID + "/" + METHOD_GET_COMMENTS_COUNT;			return getCommentsCount( url );		}				/**		 * 		 * @param	departureID		 * @param	photoID		 * @return		 */				public function getEmployeePhotosCommentsCount( departureID:int, photoID:int ):ProviderURLLoader {			var url:String = apiAddress + METHOD_GET_DEPARTURE + "/" + departureID + "/employees-photos/" + photoID + "/" + METHOD_GET_COMMENTS_COUNT;			return getCommentsCount( url );		}				/**		 * 		 * @param	contestID		 * @param	workID		 */				public function getContestCommentsCount( contestID:int, workID:int ):ProviderURLLoader {			var url:String = apiAddress + METHOD_GET_CONTESTS + "/" + contestID + "/works/" + workID + "/" + METHOD_GET_COMMENTS_COUNT;			return getCommentsCount( url );		}				/**		 * 		 * @param	id		 */				public function getVideoCommentsCount( departureID:int, videoID:int ):ProviderURLLoader {			var url:String = apiAddress + METHOD_GET_DEPARTURE + "/" + departureID + "/videos/" + videoID + "/" + METHOD_GET_COMMENTS_COUNT;			return getCommentsCount( url );		}				/**		 * 		 * @param	departureID		 * @return		 */				public function getDepartureCommentsCount( departureID:int ):ProviderURLLoader {			var url:String = apiAddress + METHOD_GET_DEPARTURE + "/" + departureID + "/" + METHOD_GET_COMMENTS_COUNT;			return getCommentsCount( url );		}				private function getCommentsCount( url:String ):ProviderURLLoader {			var loader:ProviderURLLoader = new ProviderURLLoader();			var request:URLRequest = new URLRequest( url );			var params:URLVariables = new URLVariables();						request.data = params;						loader.errorHandler = errors.onCommentsCountError;			loader.completeHandler = onCommentsCount;			return startLoad( loader, request );		}				private function onCommentsCount( data:Object, loader:ProviderURLLoader ):void {			dispatchComplete( ProviderEvent.ON_COMMENTS_COUNT, data, loader );		}				/**		 * 		 * @param	newsID		 * @param	message		 * @return		 */				public function addNewsComment( newsID:int, message:String ):ProviderURLLoader {			var url:String = apiAddress + METHOD_GET_NEWS + "/" + newsID + "/" + METHOD_COMMENTS;			return addComment( url, message );		}				/**		 * 		 * @param	newsID		 * @param	message		 * @return		 */				public function addGalleriesComment( departureID:int, galleryID:int, photoID:int, message:String ):ProviderURLLoader {			var url:String = apiAddress + METHOD_GET_DEPARTURE + "/" + departureID + "/galleries/" + galleryID + "/photos/" + photoID + "/" + METHOD_COMMENTS;			return addComment( url, message );		}				/**		 * 		 * @param	departureID		 * @param	photoID		 * @param	message		 */				public function addEmployeePhotosComment( departureID:int, photoID:int, message:String ):ProviderURLLoader {			var url:String = apiAddress + METHOD_GET_DEPARTURE + "/" + departureID + "/employees-photos/" + photoID + "/" + METHOD_COMMENTS;			return addComment( url, message );		}				/**		 * 		 * @param	departureID		 * @param	videoID		 * @param	message		 */				public function addVideoComment( departureID:int, videoID:int, message:String ):ProviderURLLoader {			var url:String = apiAddress + METHOD_GET_DEPARTURE + "/" + departureID + "/videos/" + videoID + "/" + METHOD_COMMENTS;			return addComment( url, message );		}				/**		 * 		 * @param	contestID		 * @param	workID		 * @param	message		 */				public function addContestComment( contestID:int, workID:int, message:String ):ProviderURLLoader {			var url:String = apiAddress + METHOD_GET_CONTESTS + "/" + contestID + "/works/" + workID + "/" + METHOD_COMMENTS;			return addComment( url, message );		}				/**		 * 		 * @param	departureID		 * @param	message		 * @return		 */				public function addDepartureComment( departureID:int, message:String ):ProviderURLLoader {			var url:String = apiAddress + METHOD_GET_DEPARTURE + "/" + departureID + "/" + METHOD_COMMENTS;			return addComment( url, message );		}				private function addComment( url:String, message:String ):ProviderURLLoader {			var loader:ProviderURLLoader = new ProviderURLLoader();			var request:URLRequest = new URLRequest( url );			var params:URLVariables = new URLVariables();						params.message = message;						request.method = URLRequestMethod.POST;			request.data = params;						loader.errorHandler = errors.onAddCommentError;			loader.completeHandler = onCommentAdded;			return startLoad( loader, request );		}				private function onCommentAdded( data:Object, loader:ProviderURLLoader ):void {			dispatchComplete( ProviderEvent.ON_COMMENT_ADDED, data, loader );		}				/**		 * 		 * @param	limit		 * @param	offset		 */				public function getTestsList( limit:int = 10, offset:int = 0 ):ProviderURLLoader {			var loader:ProviderURLLoader = new ProviderURLLoader();			var request:URLRequest = new URLRequest( apiAddress + METHOD_GET_TESTS );			var params:URLVariables = new URLVariables();						params.order = "date:desc";			params.limit = limit;			params.offset = offset;						request.data = params;						loader.errorHandler = errors.onTestsListError;			loader.completeHandler = onTestsList;			return startLoad( loader, request );		}				private function onTestsList( data:Object, loader:ProviderURLLoader ):void {			dispatchComplete( ProviderEvent.ON_TESTS_LIST, data, loader );		}				/**		 * 		 * @param	id		 */				public function getTestByID( id:int, withQuestions:Boolean = true ):ProviderURLLoader {			var loader:ProviderURLLoader = new ProviderURLLoader();			var request:URLRequest = new URLRequest( apiAddress + METHOD_GET_TESTS + "/" + id );			var params:URLVariables;						if ( withQuestions ) {				params = new URLVariables()				params.load = "questions";				request.data = params;			}						loader.errorHandler = errors.onTestError;			loader.completeHandler = onTest;			return startLoad( loader, request );		}				private function onTest( data:Object, loader:ProviderURLLoader ):void {			dispatchComplete( ProviderEvent.ON_TEST, data, loader );		}				/**		 * 		 * @param	id		 * @param	answers строка ответов в формате question_id:answer,question_id:answer...		 */				public function sendTestResults( testID:int, answers:String ):ProviderURLLoader {			var loader:ProviderURLLoader = new ProviderURLLoader();			var request:URLRequest = new URLRequest( apiAddress + METHOD_GET_TESTS + "/" + testID );			var params:URLVariables = new URLVariables();						params.answers = answers;						request.data = params;			request.method = URLRequestMethod.POST;						loader.errorHandler = errors.onTestResultsSendError;			loader.completeHandler = onTestResultsSent;			return startLoad( loader, request );		}				private function onTestResultsSent( data:Object, loader:ProviderURLLoader ):void {			dispatchComplete( ProviderEvent.ON_TEST_RESULT_SENT, data, loader );		}				/**		 * 		 * @param	testID		 */				public function getCompletedTest( testID:int ):ProviderURLLoader {			var loader:ProviderURLLoader = new ProviderURLLoader();			var request:URLRequest = new URLRequest( apiAddress + METHOD_GET_TESTS + "/" + testID + "/" + METHOD_GET_COMPLETED_TEST );			loader.errorHandler = errors.onCompletedTestError;			loader.completeHandler = onCompletedTest;			return startLoad( loader, request );		}				private function onCompletedTest( data:Object, loader:ProviderURLLoader ):void {			dispatchComplete( ProviderEvent.ON_COMPLETED_TEST_DATA, data, loader );		}				/**		 * 		 */				public function getMyAchievements():ProviderURLLoader {			var loader:ProviderURLLoader = new ProviderURLLoader();			var request:URLRequest = new URLRequest( apiAddress + METHOD_GET_MY_ACHIEVEMENTS );			loader.errorHandler = errors.onMyAchievementsError;			loader.completeHandler = onMyAchievements;			return startLoad( loader, request );		}				private function onMyAchievements( data:Object, loader:ProviderURLLoader ):void {			dispatchComplete( ProviderEvent.ON_MY_ACHIEVEMENTS, data, loader );		}				/**		 * 		 * @param	inviterID		 * @return		 */				public function confirmEntryeByInvite( inviterID:int ):ProviderURLLoader {			var loader:ProviderURLLoader = new ProviderURLLoader();			var request:URLRequest = new URLRequest( apiAddress + METHOD_CONFIRM_ENTRY_BY_INVITE );			var params:URLVariables = new URLVariables();						params.user_id = inviterID;						request.data = params;			request.method = URLRequestMethod.POST;						loader.errorHandler = errors.onEntryByInviteConfirmedError;			loader.completeHandler = onEntryByInviteConfirmed;						return startLoad( loader, request );		}				private function onEntryByInviteConfirmed( data:Object, loader:ProviderURLLoader ):void {			dispatchComplete( ProviderEvent.ON_ENTRY_BY_INVITE_CONFIRMED, data, loader );		}				/**		 * 		 * @param	achievementUpdateAt		 * @return		 */				public function setLastSeenAchievement( achievementUpdateAt:String ):ProviderURLLoader {			var loader:ProviderURLLoader = new ProviderURLLoader();			var request:URLRequest = new URLRequest( apiAddress + METHOD_SET_LAST_SEEN_ACHIEVEMENT );			var params:URLVariables = new URLVariables();						params.datetime = achievementUpdateAt;						request.data = params;			request.method = URLRequestMethod.POST;						loader.errorHandler = errors.onSetLastSeenAchievementError;			loader.completeHandler = onLastSeenAchievementSet;						return startLoad( loader, request );		}				private function onLastSeenAchievementSet( data:Object, loader:ProviderURLLoader ):void {			dispatchComplete( ProviderEvent.ON_LAST_SEEN_ACHIEVEMENT_SET, data, loader );		}				/**		 * 		 */				public function getContestsList( limit:int = 10, offset:int = 0 ):ProviderURLLoader {			var loader:ProviderURLLoader = new ProviderURLLoader();			var request:URLRequest = new URLRequest( apiAddress + METHOD_GET_CONTESTS );			var params:URLVariables = new URLVariables();						params.order = "date:desc";			params.limit = limit;			params.offset = offset;						request.data = params;						loader.errorHandler = errors.onGetContestsListError;			loader.completeHandler = onContestsList;						return startLoad( loader, request );		}				private function onContestsList( data:Object, loader:ProviderURLLoader ):void {			dispatchComplete( ProviderEvent.ON_CONTESTS_LIST, data, loader );		}				/**		 * 		 * @param	id		 * @param	limit		 * @param	offset		 */				public function getContestWorksList( contestID:int, limit:int = 10, offset:int = 0, employeeDataNeeded:Boolean = false, order:String = "likes:desc" ):ProviderURLLoader {			var loader:ProviderURLLoader = new ProviderURLLoader();			var request:URLRequest = new URLRequest( apiAddress + METHOD_GET_CONTESTS + "/" + contestID + "/" + METHOD_GET_CONTEST_WORKS_LIST );			var params:URLVariables = new URLVariables();						if ( order ) params.order = order;			if ( employeeDataNeeded ) params.load = "employee.user";			params.limit = limit;			params.offset = offset;						request.data = params;						loader.errorHandler = errors.onGetContestWorksListError;			loader.completeHandler = onContestWorksList;						return startLoad( loader, request );		}				/**		 * 		 * @param	data		 * @param	loader		 */				private function onContestWorksList( data:Object, loader:ProviderURLLoader ):void {			dispatchComplete( ProviderEvent.ON_CONTEST_WORKS_LIST, data, loader );		}				/**		 * 		 * @param	contestID		 */				public function getContest( contestID:int ):ProviderURLLoader {			var loader:ProviderURLLoader = new ProviderURLLoader();			var request:URLRequest = new URLRequest( apiAddress + METHOD_GET_CONTESTS + "/" + contestID );			loader.errorHandler = errors.onGetContestError;			loader.completeHandler = onContest;			return startLoad( loader, request );		}				private function onContest( data:Object, loader:ProviderURLLoader ):void {			dispatchComplete( ProviderEvent.ON_CONTEST, data, loader );		}				/**		 * 		 * @param	photoBytes		 * @param	message		 * @param	contestID		 */				public function uploadPhotoToContest( photoBytes:ByteArray, message:String, contestID:int ):MultipartURLLoader {			var loader:MultipartURLLoader = new MultipartURLLoader();			var request:String = apiAddress + METHOD_GET_CONTESTS + "/" + contestID + "/" + METHOD_ADD_WORK_TO_CONTEST;			request += "?auth_key=" + helper.getAuthKey();			request += "&user_id=" + helper.getUserID();			request += "&is_employee=" + int( helper.isEmployeeMode );						loader.addVariable( "title", message );			loader.addFile( photoBytes, "image.jpg", "photo", "image/jpg" );						loader.addEventListener( Event.COMPLETE, onPhotoUploadedToContest );			loader.load( request );			return loader;		}				private function onPhotoUploadedToContest( event:Event ):void {			var loader:MultipartURLLoader = event.target as MultipartURLLoader;			var data:Object = JSON.parse( loader.loader.data ).response.data;			loader.removeEventListener( Event.COMPLETE, onPhotoUploaded );			loader.dispose();			loader = null;			dispatchComplete( ProviderEvent.ON_PHOTO_UPLOADED_TO_CONTEST, data );		}				/**		 * 		 * @param	title		 * @param	message		 * @param	id		 */				public function addStory( title:String, message:String, contestID:int ):ProviderURLLoader {			var loader:ProviderURLLoader = new ProviderURLLoader();			var request:URLRequest = new URLRequest( apiAddress + METHOD_GET_CONTESTS + "/" + contestID + "/" + METHOD_ADD_WORK_TO_CONTEST );			var params:URLVariables = new URLVariables();						params.title = title;			params.story = message;						request.method = URLRequestMethod.POST;			request.data = params;						loader.errorHandler = errors.onAddStoryError;			loader.completeHandler = onStoryAdded;			return startLoad( loader, request );		}				private function onStoryAdded( data:Object, loader:ProviderURLLoader ):void {			dispatchComplete( ProviderEvent.ON_STORY_ADDED, data, loader );		}				/**		 * 		 * @param	name		 */				private function getPageByName( name:String, completeHandler:Function, errorHandler:Function ):ProviderURLLoader {			var loader:ProviderURLLoader = new ProviderURLLoader();			var request:URLRequest = new URLRequest( apiAddress + METHOD_GET_PAGE + "/" + name );			loader.errorHandler = errorHandler;			loader.completeHandler = completeHandler;			return startLoad( loader, request );		}				/**		 * 		 * @param	loader		 * @param	request		 */				private function startLoad( loader:ProviderURLLoader, request:URLRequest ):ProviderURLLoader {			loader.load( request );			dispatchEvent( new ProviderEvent( ProviderEvent.ON_LOAD_START ) );			return loader;		}				/**		 * 		 * @param	eventType		 * @param	data		 */				private function dispatchComplete( eventType:String, data:Object, loader:ProviderURLLoader = null ):void {			var event:ProviderEvent = new ProviderEvent( eventType );			if( data ) event.data = data;			dispatchEvent( event );			if ( loader ) loader.dispatchEvent( event );		}				/**		 * 		 * @param	methodInActionScriptFormat		 */				private function getSortMethodInAPIFormat( methodInActionScriptFormat:int ):String {			return methodInActionScriptFormat === Array.DESCENDING ? "desc" : "asc";		}				/**		 * 		 * @param	value		 * @return		 */				private function checkSortMethodOnValid( value:int ):Boolean {			return value === Array.NUMERIC || value === Array.DESCENDING;		}	}}