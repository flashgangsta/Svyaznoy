package com.svyaznoy {	import com.flashgangsta.managers.MappingManager;	import com.flashgangsta.utils.LocalImageLoader;	import com.flashgangsta.utils.PopupsController;	import com.svyaznoy.events.EditPhotoEvent;	import com.svyaznoy.events.EmployeePhotosEvent;	import com.svyaznoy.events.PreviewEvent;	import com.svyaznoy.events.ProviderEvent;	import com.svyaznoy.events.RatingEvent;	import com.svyaznoy.gui.Button;	import com.svyaznoy.gui.LabelWithIcon;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.net.FileFilter;	import flash.text.TextField;	/**	 * ...	 * @author Sergey Krivtsov (flashgangsta@gmail.com)	 */	public class Profile extends Screen {				public var usernameLabel:TextField;				private const MARGIN:int = 30;		private const TITLE_BOTTOM_MARGIN:int = 35;				private var helper:Helper = Helper.getInstance();		private var userData:UserData;		private var avatar:AvatarContainer;		private var totalStarsLabel:LabelWithIcon;		private var totalLightnings:LabelWithIcon;		private var addPhotoButton:Button;		private var localImageLoader:LocalImageLoader;		private var popupsController:PopupsController = PopupsController.getInstance();		private var addPhotoPopup:AddPhoto;		private var departuresDatasList:Array;		private var profilePhotos:ProfilePhotos;		private var editPhotoPopup:EditPhoto;		private var albumsDatas:Array;		private var inviteButton:Button;		private var achievementsTitle:TextField;		private var photosTitle:TextField;		private var achievementsController:AchievementsController = AchievementsController.getInstance();		private var achievementsList:AchievementsList;		private var ratingLoader:ProviderURLLoader;						/**		 * 		 */				public function Profile() {			usernameLabel = getChildByName( "usernameLabel_txt" ) as TextField;			avatar = getChildByName( "avatar_mc" ) as AvatarContainer;			totalStarsLabel = getChildByName( "totalStars_mc" ) as LabelWithIcon;			totalLightnings = getChildByName( "totalLightnings_mc" ) as LabelWithIcon;			addPhotoButton = getChildByName( "addPhotoButton_mc" ) as Button;			inviteButton = getChildByName( "inviteButton_mc" ) as Button;			achievementsTitle = getChildByName( "achievementsTitle_txt" ) as TextField;			photosTitle = getChildByName( "photosTitle_txt" ) as TextField;						// Local images loader			var fileFiltersList:Array = [];			fileFiltersList.push( new FileFilter( "Изображения", "*.jpg;*.jpeg;*.gif;*.png" ) );			localImageLoader = new LocalImageLoader( fileFiltersList );			localImageLoader.addEventListener( Event.COMPLETE, onPhotoSelected );			addPhotoButton.addEventListener( MouseEvent.CLICK, onAddPhotoCalled );						//UserData			userData = helper.getUserData();						//UserName			usernameLabel.text = userData.nameAndSurname;						//Avatar			avatar.loadByPath( userData.photo200 );						//Provider			provider.addEventListener( ProviderEvent.ON_OWNER_RATING, onRating );			provider.addEventListener( ProviderEvent.ON_OWNER_ALBUMS, onAlbums );			provider.addEventListener( ProviderEvent.ON_DEPARTURES_LIST, onDeparturesList );			provider.getDeparturesList( null, null );			provider.getOwnerAlbums();						//this			addEventListener( Event.ADDED_TO_STAGE, onAddedToStage );			addEventListener( PreviewEvent.ON_PROFILE_PHOTO_EDIT_CALLED, onEditPhotoCalled );						Dispatcher.getInstance().addEventListener( RatingEvent.OWNER_RATING_CHANGED, onRatingChanged );						//Invite			inviteButton.addEventListener( MouseEvent.CLICK, onInviteButtonClicked );						//Achievements			achievementsTitle.visible = false;			showAchievements();						alignItems();						addEventListener( Event.ADDED_TO_STAGE, onAddedToStage );		}				/**		 * 		 * @param	event		 */				private function onRatingChanged( event:RatingEvent ):void {			if ( !ratingLoader ) {				ratingLoader = provider.getOwnerRating();				totalLightnings.visible = totalStarsLabel.visible = false;			}		}				/**		 * 		 */				private function alignItems():void {			if ( achievementsList ) {				achievementsList.y = achievementsTitle.y + TITLE_BOTTOM_MARGIN;				photosTitle.y = MappingManager.getBottom( achievementsList, this ) + MARGIN;			} else {				photosTitle.y = achievementsTitle.y;			}			addPhotoButton.y = photosTitle.y + TITLE_BOTTOM_MARGIN;						if ( profilePhotos ) {				profilePhotos.y = MappingManager.getBottom( addPhotoButton, this ) + MARGIN;			}		}				/**		 * 		 * @param	event		 */				private function showAchievements( event:ProviderEvent = null ):void {			if ( event ) {				provider.removeEventListener( ProviderEvent.ON_MY_ACHIEVEMENTS, showAchievements );			}						if ( achievementsController.isLoaded ) {				var list:Vector.<Object> = achievementsController.getList();				if ( list.length ) {					achievementsTitle.visible = true;					achievementsList = new AchievementsList();					achievementsList.fill( list );					addChild( achievementsList );					alignItems();				}			} else {				provider.addEventListener( ProviderEvent.ON_MY_ACHIEVEMENTS, showAchievements );			}		}				/**		 * 		 * @param	event		 */				private function onAchievementsLoaded( event:ProviderEvent ):void {			showAchievements();		}				/**		 * 		 * @param	event		 */				private function onInviteButtonClicked( event:MouseEvent ):void {			helper.vkAPI.callMethod( "showInviteBox" );		}				/**		 * 		 * @param	event		 */				private function onAddedToStage( event:Event ):void {			removeEventListener( Event.ADDED_TO_STAGE, onAddedToStage );			removePreloader();			ratingLoader = provider.getOwnerRating();		}				/**		 * 		 * @param	event		 */				private function onDeparturesList( event:ProviderEvent ):void {			departuresDatasList = event.data as Array;			if ( addPhotoPopup ) {				addPhotoPopup.setDepartures( departuresDatasList );			}						if ( profilePhotos ) {				profilePhotos.setDepartures( departuresDatasList );			}						if ( editPhotoPopup ) {				editPhotoPopup.setDepartures( departuresDatasList );			}		}				/**		 * 		 * @param	event		 */				private function onPhotoSelected( event:Event ):void {			if ( !addPhotoPopup ) {				addPhotoPopup = new AddPhoto();				addPhotoPopup.addEventListener( Event.COMPLETE, onPhotoUploaded );				if ( departuresDatasList ) addPhotoPopup.setDepartures( departuresDatasList );			}			addPhotoPopup.init( localImageLoader.getBitmap() );			popupsController.showPopup( addPhotoPopup, true );		}				/**		 * 		 * @param	event		 */				private function onPhotoUploaded( event:Event ):void {			var newPhotoData:Object = addPhotoPopup.getUploadedPhotoData();			var outputEvent:EmployeePhotosEvent						if ( !newPhotoData ) {				trace( "Photo uploading is failed" );				return;			} else if ( !albumsDatas || !albumsDatas.length ) {				albumsDatas = [ newPhotoData ];				showUserAlbums();			} else {				profilePhotos.addNewPhoto( newPhotoData );			}						outputEvent = new EmployeePhotosEvent( EmployeePhotosEvent.ON_EMPLOYEE_ALBUM_UPDATED );			outputEvent.departureID = newPhotoData.departure_id;			Dispatcher.getInstance().dispatchEvent( outputEvent );		}				/**		 * 		 * @param	event		 */				private function onAddPhotoCalled( event:MouseEvent ):void {			localImageLoader.browse();		}				/**		 * 		 * @param	event		 */				private function onAlbums( event:ProviderEvent ):void {			albumsDatas = event.data as Array;			showUserAlbums();		}				/**		 * 		 * 		 */				private function showUserAlbums():void {			if ( albumsDatas.length ) {				if ( !profilePhotos ) {					profilePhotos = new ProfilePhotos();					profilePhotos.addEventListener( Event.RESIZE, onProfilePhotosResized );					alignItems();					addChild( profilePhotos );				}				profilePhotos.init( albumsDatas, departuresDatasList );			}		}				/**		 * 		 * @param	event		 */				private function onRating( event:ProviderEvent ):void {			ratingLoader = null;			var rate:Number = helper.getSettings().starsInLightning;			var stars:int = event.data.rating;			var lightnings:int = Math.floor( stars / rate );			totalLightnings.value = lightnings.toString();			totalStarsLabel.value = ( stars - ( lightnings * rate ) ).toString();			totalLightnings.visible = totalStarsLabel.visible = true;			totalLightnings.x = Math.floor( totalStarsLabel.x - totalLightnings.width - 5 )		}				/**		 * 		 * @param	event		 */				private function onProfilePhotosResized( event:Event ):void {			dispatchHeighUpdated();		}				/**		 * 		 * @param	event		 */				private function onEditPhotoCalled( event:PreviewEvent ):void {			var photo:PreviewDepartureImage = event.target as PreviewDepartureImage;			var data:Object = photo.getData();			if ( !editPhotoPopup ) {				editPhotoPopup = new EditPhoto();				editPhotoPopup.addEventListener( EditPhotoEvent.ON_DEPARTURE_CHANGED, onDepartureOfPhotoChanged );				editPhotoPopup.addEventListener( EditPhotoEvent.ON_PHOTO_DELETED, onPhotoDeleted );				if ( departuresDatasList ) editPhotoPopup.setDepartures( departuresDatasList );			}			editPhotoPopup.init( photo );			popupsController.showPopup( editPhotoPopup, true );		}				/**		 * 		 * @param	event		 */				private function onDepartureOfPhotoChanged( event:EditPhotoEvent ):void {			var editedPhotoPreview:PreviewDepartureImage = editPhotoPopup.getPhotoPreview();			profilePhotos.changePhotoDeparture( editedPhotoPreview );		}				/**		 * 		 * @param	event		 */				private function onPhotoDeleted( event:EditPhotoEvent ):void {			var deletedPhotoPreview:PreviewDepartureImage = editPhotoPopup.getPhotoPreview();			profilePhotos.deletePhoto( deletedPhotoPreview );		}			}}