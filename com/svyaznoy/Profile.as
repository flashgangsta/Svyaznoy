package com.svyaznoy {	import com.flashgangsta.managers.MappingManager;	import com.flashgangsta.utils.LocalImageLoader;	import com.flashgangsta.utils.PopupsController;	import com.svyaznoy.events.PreviewEvent;	import com.svyaznoy.events.ProviderEvent;	import com.svyaznoy.gui.Button;	import com.svyaznoy.gui.LabelWithIcon;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.net.FileFilter;	import flash.text.TextField;	/**	 * ...	 * @author Sergey Krivtsov (flashgangsta@gmail.com)	 */	public class Profile extends Screen {				public var usernameLabel:TextField;				private const MARGIN:int = 30;				private var helper:Helper = Helper.getInstance();		private var userData:UserData;		private var avatar:AvatarContainer;		private var totalStarsLabel:LabelWithIcon;		private var addPhotoButton:Button;		private var localImageLoader:LocalImageLoader;		private var popupsController:PopupsController = PopupsController.getInstance();		private var addPhotoPopup:AddPhoto;		private var departuresDatasList:Array;		private var profilePhotos:ProfilePhotos;		private var editPhotoPopup:EditPhoto;				public function Profile() {			usernameLabel = getChildByName( "usernameLabel_txt" ) as TextField;			avatar = getChildByName( "avatar_mc" ) as AvatarContainer;			totalStarsLabel = getChildByName( "totalStars_mc" ) as LabelWithIcon;			addPhotoButton = getChildByName( "addPhotoButton_mc" ) as Button;						// local images loader			var fileFiltersList:Array = [];			fileFiltersList.push( new FileFilter( "Изображения", "*.jpg;*.jpeg;*.gif;*.png" ) );			localImageLoader = new LocalImageLoader( fileFiltersList );			localImageLoader.addEventListener( Event.COMPLETE, onPhotoSelected );			addPhotoButton.addEventListener( MouseEvent.CLICK, onAddPhotoCalled );						//UserData			userData = helper.getUserData();						//UserName			usernameLabel.text = userData.nameAndSurname;						//Avatar			avatar.loadByPath( userData.photo200 );						//Provider			provider.addEventListener( ProviderEvent.ON_OWNER_RATING, onRating );			provider.addEventListener( ProviderEvent.ON_OWNER_ALBUMS, onAlbums );			provider.addEventListener( ProviderEvent.ON_DEPARTURES_LIST, onDeparturesList );			provider.getDeparturesList( null, null );			provider.getOwnerRating();			provider.getOwnerAlbums();						//this			addEventListener( Event.ADDED_TO_STAGE, onAddedToStage );			addEventListener( PreviewEvent.ON_PROFILE_PHOTO_EDIT_CALLED, onEditPhotoCalled );		}				/**		 * 		 * @param	event		 */				private function onAddedToStage( event:Event ):void {			removeEventListener( Event.ADDED_TO_STAGE, onAddedToStage );			removePreloader();		}				/**		 * 		 * @param	event		 */				private function onDeparturesList( event:ProviderEvent ):void {			departuresDatasList = event.data as Array;			if ( addPhotoPopup ) {				addPhotoPopup.setDepartures( departuresDatasList );			}						if ( profilePhotos ) {				profilePhotos.setDepartures( departuresDatasList );			}						if ( editPhotoPopup ) {				editPhotoPopup.setDepartures( departuresDatasList );			}		}				/**		 * 		 * @param	event		 */				private function onPhotoSelected( event:Event ):void {			if ( !addPhotoPopup ) {				addPhotoPopup = new AddPhoto();				addPhotoPopup.addEventListener( Event.COMPLETE, onPhotoUploaded );				if ( departuresDatasList ) addPhotoPopup.setDepartures( departuresDatasList );			}			addPhotoPopup.init( localImageLoader.getBitmap() );			popupsController.showPopup( addPhotoPopup, true );		}				/**		 * 		 * @param	event		 */				private function onPhotoUploaded( event:Event ):void {			addPhotoPopup.getUploadedPhotoData();		}				/**		 * 		 * @param	event		 */				private function onAddPhotoCalled( event:MouseEvent ):void {			localImageLoader.browse();		}				/**		 * 		 * @param	event		 */				private function onAlbums( event:ProviderEvent ):void {			trace( "onAlbums" );			var albumsDatas:Array = event.data as Array;			if ( albumsDatas.length ) {				if ( !profilePhotos ) {					profilePhotos = new ProfilePhotos();					profilePhotos.addEventListener( Event.RESIZE, onProfilePhotosResized );					profilePhotos.y = MappingManager.getBottom( addPhotoButton, this ) + MARGIN;					addChild( profilePhotos );				}				profilePhotos.init( albumsDatas, departuresDatasList );			}		}				/**		 * 		 * @param	event		 */				private function onRating( event:ProviderEvent ):void {			provider.removeEventListener( ProviderEvent.ON_OWNER_RATING, onRating );			totalStarsLabel.value = event.data.rating;		}				/**		 * 		 * @param	event		 */				private function onProfilePhotosResized( event:Event ):void {			trace( "onProfilePhotosResized", height );			dispatchHeighUpdated();		}				/**		 * 		 * @param	event		 */				private function onEditPhotoCalled( event:PreviewEvent ):void {			var photo:PreviewDepartureImage = event.target as PreviewDepartureImage;			var data:Object = photo.getData();			trace( data.id );			trace( data.departureName );			trace( data.departure_id );			if ( !editPhotoPopup ) {				editPhotoPopup = new EditPhoto();				editPhotoPopup.addEventListener( Event.COMPLETE, onPhotoEdited );				if ( departuresDatasList ) editPhotoPopup.setDepartures( departuresDatasList );			}			editPhotoPopup.init( photo );			popupsController.showPopup( editPhotoPopup, true );		}				/**		 * 		 * @param	event		 */				private function onPhotoEdited( event:Event ):void {					}			}}