package com.svyaznoy {	import com.flashgangsta.managers.MappingManager;	import flash.display.Sprite;	import flash.text.TextFormat;		/**	 * ...	 * @author Sergey Krivtsov (flashgangsta@gmail.com)	 */	public class ProfilePhotosDepartureBar extends Sprite {				private const ROW_COUNT:int = 3;		private const MARGIN_H:int = 20;				private var button:DeparturesPhotosButton;		private var datasList:Vector.<Object>;		private var photosContainer:Sprite = new Sprite();		private var nameTextFormat:TextFormat;		private var lengthTextFormat:TextFormat;		private var departureID:String;				/**		 * 		 * @param	datasList		 */				public function ProfilePhotosDepartureBar( datasList:Vector.<Object>, loadPhotos:Boolean = true ) {			this.datasList = datasList;			departureID = datasList[ 0 ].departure_id;			button = getChildByName( "button_mc" ) as DeparturesPhotosButton;			nameTextFormat = button.getLabelTextFormat();			lengthTextFormat = button.getLabelTextFormat();			lengthTextFormat.color = 0xFFFFFF;			lengthTextFormat.size = 14;			setLabel();						photosContainer.y = MappingManager.getBottom( button, this ) + 10;			addChild( photosContainer );						if( loadPhotos ) addPhotos();		}				/**		 * 		 */				public function setLabel():void {			var length:int = datasList.length;			if ( !length ) return;			var lengthMessage:String = " (" + length + " фото)";			var name:String = datasList[ 0 ].departureName;			var message:String = name + lengthMessage;			button.setLabel( message.toUpperCase() ) ;			button.setLabelTextFormat( nameTextFormat, -1, name.length );			button.setLabelTextFormat( lengthTextFormat, name.length + 1, message.length );			button.setLabel( message.toUpperCase() ) ;			button.enabled = button.iconVisible = length > ROW_COUNT;		}				/**		 * 		 */				public function dispose():void {			var photo:PreviewDepartureImage;						while ( photosContainer.numChildren ) {				photo = getPhotoByIndex( 0 ) as PreviewDepartureImage;				photo.dispose();				photosContainer.removeChild( photo );				photo = null;			}						button.dispose();		}				/**		 * 		 * @return		 */				public function getDepartureID():String {			return departureID;		}				/**		 * 		 * @param	data		 */				public function addPhoto( data:Object ):void {			movePhoto( createPhotoByData( data ) );		}				/**		 * 		 * @param	editedPhotoPreview		 */				public function movePhoto( photo:PreviewDepartureImage ):void {			var length:int = getClosedLength();						setLabel();						if ( !button.isOpened && numPhotos >= ROW_COUNT ) {				return;			}						addPhotoToDisplay( photo );						alignPhotos();		}				/**		 * 		 * @param	photo		 */				public function removePhoto( photo:PreviewDepartureImage ):void {			photosContainer.removeChild( photo );			updateDisplayList();			setLabel();		}				/**		 * 		 */				public function get numPhotos():int {			return photosContainer.numChildren;		}				/**		 * 		 */				override public function get height():Number {			var result:Number = 0;			for ( var i:int = 0; i < photosContainer.numChildren; i++ ) {				result = Math.max( result, getPhotoByIndex( i ).height );			}			return result + photosContainer.y;		}				/**		 * 		 */				private function alignPhotos():void {			var numPhotos:int = photosContainer.numChildren;			var photo:PreviewDepartureImage;			for ( var i:int = 0; i < numPhotos; i++ ) {				photo = getPhotoByIndex( i ) as PreviewDepartureImage;				photo.x = Math.round( ( photo.width + MARGIN_H ) * ( i % ROW_COUNT ) );			}		}				/**		 * 		 */				private function addPhotos():void {			var length:int = getClosedLength();			var photo:PreviewDepartureImage;						for ( var i:int = 0; i < length; i++ ) {				photo = createPhotoByIndex( i );				addPhotoToDisplay( photo );			}						alignPhotos();		}				/**		 * 		 */				private function updateDisplayList():void {			var length:int = getClosedLength();			var notDisplayedDatas:Vector.<Object> = new Vector.<Object>();			var photo:PreviewDepartureImage;			notDisplayedDatas = notDisplayedDatas.concat( datasList );						for ( var i:int = 0; i < numPhotos; i++ ) {				var data:Object = getPhotoByIndex( i ).getData();				notDisplayedDatas.splice( notDisplayedDatas.indexOf( data ), 1 );			}						if ( numPhotos < length ) {				for ( var j:int = 0; j < length; j++ ) {					photo = createPhotoByData( notDisplayedDatas[ j ] );					addPhotoToDisplay( photo );					if ( numPhotos === length ) break;				}			}			alignPhotos();		}				/**		 * 		 * @return		 */				private function getClosedLength():int {			return Math.min( datasList.length, ROW_COUNT );		}				/**		 * 		 * @param	photo		 * @return		 */				private function addPhotoToDisplay( photo:PreviewDepartureImage ):PreviewDepartureImage {			photosContainer.addChild( photo );			return photo;		}				/**		 * 		 * @param	index		 */				private function createPhotoByIndex( index:int ):PreviewDepartureImage {			return createPhotoByData( datasList[ index ] );		}				/**		 * 		 * @param	data		 * @return		 */				private function createPhotoByData( data:Object ):PreviewDepartureImage {			return new PreviewDepartureImage( data );		}				/**		 * 		 * @param	index		 * @return		 */				private function getPhotoByIndex( index:int ):PreviewDepartureImage {			return photosContainer.getChildAt( index ) as PreviewDepartureImage;		}			}}