/* * Scrollbar * Class for quick setting personal scrollbar component * * @author		Sergei Krivtsov * @version		1.01.06	18/09/2013 * @e-mail		flashgangsta@gmail.com **/package com.flashgangsta.ui {	import flash.display.DisplayObject;	import flash.display.Sprite;	import flash.events.Event;	import flash.geom.Rectangle;	import flash.display.MovieClip;	import com.flashgangsta.managers.ButtonManager;	import com.flashgangsta.display.Drawing;	import flash.display.Stage;	import flash.events.MouseEvent;	import flash.utils.setTimeout;	import flash.utils.clearTimeout;	import flash.external.ExternalInterface;		public class Scrollbar {				private static const SCROLL_INTERVAL_START:int = 500;		private static const SCROLL_INTERVAL:int = 100;				private static var id:int = 0;		private static var dataBase:Array = [];		private static var scrollInterval:uint;		private static var scrollingByInterval:Boolean = false;				/**		 * 		 */				public function Scrollbar() {			throw new Error( "Scrollbar is a static class and should not be instantiated." );		}				/**		 * 		 * @param	content		 * @param	scrollArea		 * @param	up		 * @param	down		 * @param	carret		 * @param	carretDragArea		 * @param	wheelListenerObject		 * @param	scrollDrag		 */				public static function setVertical( content:MovieClip, scrollArea:Rectangle, up:MovieClip, down:MovieClip, carret:MovieClip, carretDragArea:Rectangle, wheelListenerObject:DisplayObject, scrollDrag:Boolean = false ):void {						var data:Object = { };			data.id = id;			data.content = content;			data.contentHeight = content.height + content.getBounds( content ).y;			data.scrollArea = scrollArea;			data.up = up;			data.down = down;			data.carret = carret;			data.carretRoad = addCarretRoad( carret, carretDragArea );			data.carretDragArea = carretDragArea;			data.wheelListenerObject = wheelListenerObject;			data.locked = false;						dataBase.push( data );			up.id = id;			down.id = id;			carret.id = id;			content.id = id;						if( scrollDrag ) {				ButtonManager.addButton( MovieClip( content ), null, dropContent, dropContent, dragContent );			}						var idIdentificator:MovieClip;			idIdentificator = new MovieClip();			idIdentificator.id = id;			wheelListenerObject.stage.addChild( idIdentificator );						wheelListenerObject.stage.addEventListener( MouseEvent.MOUSE_WHEEL, onWheel );						update( carret );						ButtonManager.addButton( up, null, clearScrollInterval, clearScrollInterval, scrollUp, null, null, false );			ButtonManager.addButton( down, null, clearScrollInterval, clearScrollInterval, scrollDown, null, null, false );			ButtonManager.addButton( carret, null, dropCarret, dropCarret, dragCarret, null, null, false );						reset( carret );						++ id;					}				/**		 * 		 * @param	carret		 */				public static function removeVerticalScrollbar( carret:MovieClip ):void {			var data:Object = getData( carret.id );						data.up.id = null;			data.down.id = null;			data.carret.id = null;			data.content.id = null;			data.carretRoad.id = null;						ButtonManager.removeButton( MovieClip( data.content ) );			ButtonManager.removeButton( data.up );			ButtonManager.removeButton( data.down );			ButtonManager.removeButton( data.carret );									data.wheelListenerObject.removeEventListener( MouseEvent.MOUSE_WHEEL, onWheel );						trace( "Scrollbar", data.id, "removed." );						dataBase[ data.id ] = null;			data = null;		}				/**		 * Сбросить скроллбар в начальное положение		 * @param	carret		 */				public static function reset( carret:MovieClip ):void {			var data:Object = getData( carret.id );			var oldPercent:Number = getPercent( carret );			carret.y = data.carretDragArea.y;			data.content.y = data.scrollArea.y;			setButtonsStates( data );						if( getPercent( carret ) !== oldPercent ) {				dispatchChange( carret );			}		}				/**		 * Обновить расчеты скролирования		 * @param	carret		 */				public static function update( carret:MovieClip ):void {			var data:Object = getData( carret.id );			var content:MovieClip = data.content;			data.contentHeight = content.height + content.getBounds( content ).y;			setCarretSize( carret );		}				/**		 * Блокирует скроллбар		 * @param	carret		 */				public static function lock( carret:MovieClip ):void {			var data:Object = getData( carret.id );			data.locked = true;		}				/**		 * Разблокирует скроллба		 * @param	carret		 */				public static function unlock( carret:MovieClip ):void {			var data:Object = getData( carret.id );			data.locked = false;		}				/**		 * Нужен ли скроллбар? Или контент не больше экрана		 * @param	carret	ссылка на MovieClip каретки		 */				public static function isNeeded( carret:MovieClip ):Boolean {			var data:Object = getData( carret.id );			return data.scrollArea.height < data.contentHeight;		}				/**		 * 		 * @param	percent		 * @param	carret		 */				static public function setScrollPositionByPercent( percent:Number, carret:MovieClip ):void {			var data:Object = getData( carret.id );			carret.y = Math.floor( ( data.carretDragArea.y + data.carretDragArea.height ) - carret.height );			setContentPosition( data );			dispatchChange( carret );		}				/**		 * 		 * @param	carret		 * @return		 */				static public function getPercent( carret:MovieClip ):Number {			var data:Object = getData( carret.id );			return getPercentByCarret( data );		}				/**		 * 		 * @param	carret		 */				private static function setCarretSize( carret:MovieClip ):void {			var data:Object = getData( carret.id );			if ( data.scrollArea.height >= data.contentHeight ) {				return;			}			var precent:int = Math.round( data.scrollArea.height / data.contentHeight * 100 );			data.carret.height = Math.round( data.carretDragArea.height / 100 * precent );		}				/**		 * 		 * @param	data		 */				private static function setButtonsStates( data:Object ):void {			if( data.carret.y === data.carretDragArea.y ) {				ButtonManager.setButtonState( data.up, ButtonManager.STATE_NORMAL );				ButtonManager.setButtonEnable( data.up, false, true );				ButtonManager.setButtonEnable( data.down, true, true );			} else if( !ButtonManager.getButtonEnable( data.up ) ) {				ButtonManager.setButtonEnable( data.up, true, true );			}						if( data.carret.y === data.carretDragArea.y + data.carretDragArea.height - data.carret.height ) {				ButtonManager.setButtonState( data.down, ButtonManager.STATE_NORMAL );				ButtonManager.setButtonEnable( data.down, false, true );				ButtonManager.setButtonEnable( data.up, true, true );			} else if( !ButtonManager.getButtonEnable( data.down ) ) {				ButtonManager.setButtonEnable( data.down, true, true );			}		}				/**		 * 		 * @param	target		 */				private static function dragCarret( target:MovieClip ):void {			var data:Object = Scrollbar.getData( target.id );						var idIdentificator:MovieClip = new MovieClip();			idIdentificator.id = data.id;			target.stage.addChild( idIdentificator );			target.idIdentificator = idIdentificator;						target.startDrag( false, new Rectangle( data.carretDragArea.x, data.carretDragArea.y, 0, data.carretDragArea.height - data.carret.height ) );			target.stage.addEventListener( MouseEvent.MOUSE_MOVE, onCarretDragged );		}				/**		 * 		 * @param	target		 */				private static function dropCarret( target:MovieClip ):void {			target.stopDrag();			target.stage.removeEventListener( MouseEvent.MOUSE_MOVE, onCarretDragged );		}				/**		 * 		 * @param	event		 */				private static function onCarretDragged( event:MouseEvent ):void {			var id:int = ( event.currentTarget.getChildAt( event.currentTarget.numChildren - 1 ) as MovieClip ).id;			var data:Object = Scrollbar.getData( id );			var carret:MovieClip = data.carret;			var oldPercent:Number = getPercentByContent( data );			Scrollbar.setContentPosition( data );			if( oldPercent !== getPercentByContent( data ) ) {				dispatchChange( data.carret );			}		}				/**		 * 		 * @param	event		 */				private static function onWheel( event:MouseEvent ):void {			var id:int;			id = ( event.currentTarget.getChildAt( event.currentTarget.numChildren - 1 ) as MovieClip ).id;			var data:Object = Scrollbar.getData( id );			var wheelListener:DisplayObject = data.wheelListenerObject;			var stage:Stage = wheelListener.stage;			if ( wheelListener is Stage === false ) {				if ( !wheelListener.hitTestPoint( stage.mouseX, stage.mouseY ) ) return;			}			if( data.locked ) return;			data.content.y += ( event.delta * 40 );			Scrollbar.setMargins( data );			Scrollbar.setCarretPosition( data );			Scrollbar.setButtonsStates( data );			dispatchChange( data.carret );		}				/**		 * Выравнивает контент, если он зашёл за границы прокрутки		 * @param	data		 */				private static function setMargins( data:Object ):void {			var scrollArea:Rectangle = data.scrollArea;			var content:DisplayObject = data.content;			var contentHeight:Number = data.contentHeight;						if( content.y < scrollArea.y - ( contentHeight - scrollArea.height ) ) {				content.y = scrollArea.y - ( contentHeight - scrollArea.height );			}			if( content.y > scrollArea.y ) {				content.y = scrollArea.y;			}		}				/**		 * Устанавливает требуемую позицию каретки скролл-бара		 * @param	data		 */				private static function setCarretPosition( data:Object ):void {			var carretDragArea:Rectangle = data.carretDragArea;			var precent:int = getPercentByContent( data );			var carret:DisplayObject = data.carret;			carret.y = Math.round( carretDragArea.y + ( ( carretDragArea.height - carret.height ) / 100 * precent ) );		}				/**		 * Устанавливает требуемую позицию контента		 * @param	data		 */				private static function setContentPosition( data:Object ):void {			var precent:int = getPercentByCarret( data );			data.content.y = data.scrollArea.y - ( ( data.contentHeight - data.scrollArea.height ) / 100 * precent );			Scrollbar.setButtonsStates( data );		}				/**		 * 		 * @param	data		 * @return		 */				static private function getPercentByCarret( data:Object ):Number {			var carretDragArea:Rectangle = data.carretDragArea;			var carret:DisplayObject = data.carret;			return Math.round( ( carret.y - carretDragArea.y ) / ( carretDragArea.height - carret.height ) * 100 );		}				/**		 * 		 * @param	data		 * @return		 */				static protected function getPercentByContent( data:Object ):Number {			var scrollArea:Rectangle = data.scrollArea;			return Math.abs( Math.round( ( data.content.y - scrollArea.y ) / ( data.contentHeight - scrollArea.height ) * 100 ) );		}				/**		 * 		 * @param	target		 */				private static function dragContent( target:MovieClip ):void {			var idIdentificator:MovieClip = new MovieClip();			var data:Object = Scrollbar.getData( target.id );			idIdentificator.id = target.id;			target.stage.addChild( idIdentificator );			target.stage.addEventListener( MouseEvent.MOUSE_MOVE, Scrollbar.onContentDragged );			target.startDrag( false, new Rectangle( data.scrollArea.x - ( data.content.width - data.scrollArea.width ), data.scrollArea.y - ( data.content.height - data.scrollArea.height ), data.content.width - data.scrollArea.width, data.content.height - data.scrollArea.height ) );		}				/**		 * 		 * @param	target		 */				private static function dropContent( target:MovieClip ):void {			target.stopDrag();			target.stage.removeEventListener( MouseEvent.MOUSE_MOVE, Scrollbar.onContentDragged );		}				/**		 * 		 * @param	event		 */				private static function onContentDragged( event:MouseEvent ):void {			var id:int = ( event.currentTarget.getChildAt( event.currentTarget.numChildren - 1 ) as MovieClip ).id;			var data:Object = Scrollbar.getData( id );			Scrollbar.setCarretPosition( data );			Scrollbar.setButtonsStates( data );		}				/**		 * 		 * @param	target		 */				private static function scrollUp( target:MovieClip ):void {			var data:Object = Scrollbar.getData( target.id );			data.content.y += 30;			Scrollbar.setMargins( data );			Scrollbar.setCarretPosition( data );			Scrollbar.setButtonsStates( data );			Scrollbar.scrollInterval = setTimeout( Scrollbar.scrollUp, Scrollbar.scrollingByInterval ? Scrollbar.SCROLL_INTERVAL : Scrollbar.SCROLL_INTERVAL_START, target );			Scrollbar.scrollingByInterval = true;		}				/**		 * 		 * @param	target		 */				private static function scrollDown( target:MovieClip ):void {			var data:Object = Scrollbar.getData( target.id );			data.content.y -= 30;			Scrollbar.setMargins( data );			Scrollbar.setCarretPosition( data );			Scrollbar.setButtonsStates( data );			Scrollbar.scrollInterval = setTimeout( Scrollbar.scrollDown, Scrollbar.scrollingByInterval ? Scrollbar.SCROLL_INTERVAL : Scrollbar.SCROLL_INTERVAL_START, target );			Scrollbar.scrollingByInterval = true;		}				/**		 * 		 * @param	target		 */				private static function clearScrollInterval( target:MovieClip ):void {			clearTimeout( Scrollbar.scrollInterval );			Scrollbar.scrollingByInterval = false;		}				/**		 * 		 * @param	carret		 * @param	carretDragArea		 * @return		 */				private static function addCarretRoad( carret:MovieClip, carretDragArea:Rectangle ):MovieClip {			var carretRoad:MovieClip = new MovieClip();			carretRoad.id = Scrollbar.id;			carretRoad.x = carret.x;			carretRoad.y = carretDragArea.y;			Drawing.drawRectangle( carretRoad, 0, 0, carret.width, carretDragArea.height, 0, 0 );			carret.parent.addChild( carretRoad );			carret.parent.setChildIndex( carretRoad, carret.parent.getChildIndex( carret ) - 1 );			ButtonManager.addButton( carretRoad, null, null, null, carredRoadClicked, null, null, false );			return carretRoad;		}				/**		 * 		 * @param	target		 */				private static function carredRoadClicked( target:MovieClip ):void {			var data:Object = Scrollbar.getData( target.id );			var precent:int = target.mouseY / target.height * 100;			data.carret.y = Math.round( data.carretDragArea.y + ( ( data.carretDragArea.height - data.carret.height ) / 100 * precent ) );			Scrollbar.setContentPosition( data );		}				/**		 * 		 * @param	id		 * @return		 */				private static function getData( id:int ):Object {			return Scrollbar.dataBase[ id ];		}				/**		 * 		 */				static private function dispatchChange( carret:MovieClip ):void {			carret.dispatchEvent( new Event( Event.CHANGE ) );		}			}	}